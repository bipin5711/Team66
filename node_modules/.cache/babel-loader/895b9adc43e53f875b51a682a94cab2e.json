{"ast":null,"code":"import _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/views/Employee/Edit.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport EmployeeInformation from 'components/AddEmployeeForms/EmployeeInformation';\nimport CurrentAddress from 'components/AddEmployeeForms/CurrentAddress';\nimport PermanentAddress from 'components/AddEmployeeForms/PermanentAddress';\nimport EmergencyContact from 'components/AddEmployeeForms/EmergencyContact';\nimport JobDetails from 'components/AddEmployeeForms/JobDetails';\nimport IdProof from 'components/AddEmployeeForms/IdProof';\nimport EmployeePicture from 'components/AddEmployeeForms/EmployeePicture';\nimport Feedback from 'components/AddEmployeeForms/Feedback';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles'; // import { useDispatch } from 'react-redux'\n// import Snackbar from \"components/Snackbar/Snackbar.js\";\n// import InfoIcon from '@material-ui/icons/Info';\n\nimport { Link, useParams } from 'react-router-dom';\nimport api, { url } from '../../lib/axios';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    button: {\n      marginRight: theme.spacing(1)\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    },\n    cardCategoryWhite: {\n      color: \"rgba(255,255,255,.62)\",\n      margin: \"0\",\n      fontSize: \"14px\",\n      marginTop: \"0\",\n      marginBottom: \"0\"\n    },\n    cardTitleWhite: {\n      color: \"#FFFFFF\",\n      // marginBottom: \"3px\",\n      // marginTop: \"0px\",\n      marginTop: \"10px\",\n      marginBottom: \"10px\",\n      minHeight: \"auto\",\n      fontWeight: \"300\",\n      fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n      textDecoration: \"none\"\n    }\n  };\n}); // const QontoConnector = withStyles({\n//   alternativeLabel: {\n//     // top: 10,\n//     left: 'calc(-50% + 16px)',\n//     right: 'calc(50% + 16px)',\n//   },\n//   active: {\n//     '& $line': {\n//       borderColor: '#9830b0',\n//     },\n//   },\n//   completed: {\n//     '& $line': {\n//       borderColor: '#9830b0'\n//     },\n//   },\n//   line: {\n//     borderColor: '#999999',\n//     borderTopWidth: 3,\n//     borderRadius: 1,\n//   },\n// })(StepConnector);\n// const useQontoStepIconStyles = makeStyles({\n//   root: {\n//     color: 'red',\n//     display: 'flex',\n//     height: 22,\n//     alignItems: 'center',\n//   },\n//   active: {\n//     color: '#9830b0',\n//   },\n//   circle: {\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     backgroundColor: '#eaeaf0',\n//   },\n//   completed: {\n//     color: '#ffffff',\n//     backgroundColor:'#9830b0',\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     zIndex: 1,\n//     fontSize: 18,\n//   },\n// });\n// function QontoStepIcon(props) {\n//   const classes = useQontoStepIconStyles();\n//   const { active, completed } = props;\n//   return (\n//     <div>\n//       {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n//     </div>\n//   );\n// }\n\nfunction getSteps() {\n  // return ['', '', '', '', '', '', '', ''];\n  return ['Employee Information', 'Current Address', 'Permanent Address', 'Emergency Contact', 'Job Details', 'Id Proof', 'Employee Picture', 'Feedback'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return React.createElement(EmployeeInformation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n\n    case 1:\n      return React.createElement(CurrentAddress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      });\n\n    case 2:\n      return React.createElement(PermanentAddress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      });\n\n    case 3:\n      return React.createElement(EmergencyContact, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      });\n\n    case 4:\n      return React.createElement(JobDetails, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n\n    case 5:\n      return React.createElement(IdProof, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      });\n\n    case 6:\n      return React.createElement(EmployeePicture, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      });\n\n    case 7:\n      return React.createElement(Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      });\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport var EmployeeContext = createContext();\nexport var TitleContext = createContext(); // export const EmployeeDataContext = createContext()\n\nexport var StepContext = createContext();\nexport var SkipContext = createContext();\n\nfunction EditEmployee(props) {\n  var classes = useStyles();\n\n  var _useParams = useParams(),\n      id = _useParams.id; // const dispatch = useDispatch();\n\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      employeeData = _useState4[0],\n      setEmployeeData = _useState4[1];\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var _React$useState3 = React.useState(new Set()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      skipped = _React$useState4[0],\n      setSkipped = _React$useState4[1];\n\n  var steps = getSteps(); // const [addSnackbar,setAddSnackbar]=useState(false)\n  // useEffect(() => {\n  //   // dispatch({ type:'ADD_EMPLOYEE',payload:employeeData })\n  // // console.log(employeeData)\n  //   // dispatch(addEmployee(employeeData))\n  //   // console.log(\"team66\",employeeData)\n  //   activeStep === steps.length?setAddSnackbar(true):setAddSnackbar(false)\n  // })\n  // const handleGet=(id)=>{\n  //     api.get(`employees/${id}`).then(res=>{\n  //       setEmployeeData(res.data.data)\n  //       console.log(\"harsh\",res.data.data)\n  //   }).catch(err=>{console.log(\"err\",err)})\n  //   }\n  //   useEffect(()=>{\n  //     console.log(\"mehul\",id)\n  //     handleGet(id)\n  //   },[])\n  //   const isStepOptional = step => {\n  //     return step === 7 || step === 5 ;\n  //   };\n  //   const isStepSkipped = step => {\n  //     return skipped.has(step);\n  //   };\n  //   const handleReset = () => {\n  //     setActiveStep(0);\n  //   };\n  //   return (\n  //     <div>\n  //       <GridContainer zeroMinWidth>\n  //         <GridItem xs={12} sm={12} md={12} lg={9} xl={6} zeroMinWidth>\n  //           <Card>\n  //             <CardHeader color=\"primary\">\n  //               <h4 className={classes.cardTitleWhite}>{title}</h4>\n  //               {/* <h4 className={classes.cardTitleWhite}>Add Employee</h4>\n  //               <p className={classes.cardCategoryWhite}>{title}</p> */}\n  //             </CardHeader>\n  //             <CardBody>\n  //               {/* <div className={classes.root}> */}\n  //               <Stepper style={{padding:'5px 0px'}} activeStep={activeStep} alternativeLabel noWrap>\n  //                 {/* connector={<QontoConnector />} */}\n  //                 {steps.map((label, index) => {\n  //                   const stepProps = {};\n  //                   const labelProps = {};\n  //                   if (isStepOptional(index)) {\n  //                     labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n  //                   }\n  //                   if (isStepSkipped(index)) {\n  //                     stepProps.completed = false;\n  //                   }\n  //                   return (\n  //                     <Step key={label} {...stepProps}>\n  //                       <StepLabel {...labelProps} noWrap>{label}</StepLabel>\n  //                       {/* StepIconComponent={QontoStepIcon} */}\n  //                     </Step>\n  //                   );\n  //                 })}\n  //               </Stepper>\n  //               <div>\n  //                 {activeStep === steps.length ? (\n  //                   <div>\n  //                     <Typography className={classes.instructions}>\n  //                       All steps completed - you&apos;re finished\n  //             </Typography>\n  //                     <Button onClick={handleReset} className={classes.button}>\n  //                       Reset\n  //             </Button>\n  //             <Button component={Link} to=\"/admin/employees\" className={classes.button}>View Submitted Data</Button>\n  //                   </div>\n  //                 ) : (\n  //                     <div>\n  //                       <Typography className={classes.instructions}>\n  //                         <EmployeeContext.Provider value={[employeeData, setEmployeeData]}>\n  //                           <StepContext.Provider value={[activeStep, setActiveStep]}>\n  //                             <SkipContext.Provider value={[skipped, setSkipped]}>\n  //                               <TitleContext.Provider value={[title, setTitle]}>\n  //                                         {getStepContent(activeStep)}\n  //                               </TitleContext.Provider>\n  //                             </SkipContext.Provider>\n  //                           </StepContext.Provider>\n  //                         </EmployeeContext.Provider>\n  //                       </Typography>\n  //                     </div>\n  //                   )}\n  //               </div>\n  //               {/* </div> */}\n  //             </CardBody>\n  //           </Card>\n  //         </GridItem>\n  //       </GridContainer>\n  //       {/* <Snackbar\n  //               place=\"bl\"\n  //               color=\"primary\"\n  //               icon={InfoIcon}\n  //               message=\"Employee Added Successfully\"\n  //               open={addSnackbar}\n  //               closeNotification={() => setAddSnackbar(false)}\n  //               close\n  //             /> */}\n  //     </div>\n  //   );\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, id);\n}\n\nexport default EditEmployee;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/views/Employee/Edit.js"],"names":["React","createContext","useState","useEffect","EmployeeInformation","CurrentAddress","PermanentAddress","EmergencyContact","JobDetails","IdProof","EmployeePicture","Feedback","Stepper","Step","StepLabel","Button","Typography","Card","CardHeader","CardBody","GridItem","GridContainer","makeStyles","withStyles","Link","useParams","api","url","useStyles","theme","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","cardCategoryWhite","color","margin","fontSize","cardTitleWhite","minHeight","fontWeight","fontFamily","textDecoration","getSteps","getStepContent","step","EmployeeContext","TitleContext","StepContext","SkipContext","EditEmployee","props","classes","id","title","setTitle","employeeData","setEmployeeData","activeStep","setActiveStep","Set","skipped","setSkipped","steps"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport EmployeeInformation from 'components/AddEmployeeForms/EmployeeInformation';\nimport CurrentAddress from 'components/AddEmployeeForms/CurrentAddress';\nimport PermanentAddress from 'components/AddEmployeeForms/PermanentAddress';\nimport EmergencyContact from 'components/AddEmployeeForms/EmergencyContact';\nimport JobDetails from 'components/AddEmployeeForms/JobDetails';\nimport IdProof from 'components/AddEmployeeForms/IdProof';\nimport EmployeePicture from 'components/AddEmployeeForms/EmployeePicture';\nimport Feedback from 'components/AddEmployeeForms/Feedback';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n// import { useDispatch } from 'react-redux'\n// import Snackbar from \"components/Snackbar/Snackbar.js\";\n// import InfoIcon from '@material-ui/icons/Info';\nimport { Link, useParams } from 'react-router-dom'\nimport api, {url} from '../../lib/axios';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  cardCategoryWhite: {\n    color: \"rgba(255,255,255,.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\"\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    // marginBottom: \"3px\",\n    // marginTop: \"0px\",\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    textDecoration: \"none\"\n  }\n}));\n\n\n// const QontoConnector = withStyles({\n//   alternativeLabel: {\n//     // top: 10,\n//     left: 'calc(-50% + 16px)',\n//     right: 'calc(50% + 16px)',\n//   },\n//   active: {\n//     '& $line': {\n//       borderColor: '#9830b0',\n//     },\n//   },\n//   completed: {\n//     '& $line': {\n//       borderColor: '#9830b0'\n//     },\n//   },\n//   line: {\n//     borderColor: '#999999',\n//     borderTopWidth: 3,\n//     borderRadius: 1,\n//   },\n\n\n// })(StepConnector);\n\n// const useQontoStepIconStyles = makeStyles({\n//   root: {\n//     color: 'red',\n//     display: 'flex',\n//     height: 22,\n//     alignItems: 'center',\n//   },\n//   active: {\n//     color: '#9830b0',\n//   },\n//   circle: {\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     backgroundColor: '#eaeaf0',\n\n//   },\n//   completed: {\n//     color: '#ffffff',\n//     backgroundColor:'#9830b0',\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     zIndex: 1,\n//     fontSize: 18,\n//   },\n// });\n// function QontoStepIcon(props) {\n//   const classes = useQontoStepIconStyles();\n//   const { active, completed } = props;\n\n//   return (\n//     <div>\n//       {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n//     </div>\n//   );\n// }\nfunction getSteps() {\n  // return ['', '', '', '', '', '', '', ''];\n  return ['Employee Information', 'Current Address', 'Permanent Address', 'Emergency Contact', 'Job Details', 'Id Proof', 'Employee Picture', 'Feedback'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return <EmployeeInformation />;\n    case 1:\n      return <CurrentAddress />;\n    case 2:\n      return <PermanentAddress />;\n    case 3:\n      return <EmergencyContact />;\n    case 4:\n      return <JobDetails />;\n    case 5:\n      return <IdProof />;\n    case 6:\n      return <EmployeePicture />;\n    case 7:\n      return <Feedback />;\n    default:\n      return 'Unknown step';\n  }\n}\n\n\nexport const EmployeeContext = createContext()\nexport const TitleContext = createContext()\n// export const EmployeeDataContext = createContext()\nexport const StepContext = createContext()\nexport const SkipContext = createContext()\n\nfunction EditEmployee(props) {\n\n  const classes = useStyles();\n  let { id } = useParams();\n  // const dispatch = useDispatch();\n  const [title, setTitle] = useState('')\n  const [employeeData, setEmployeeData] = useState({})\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n  // const [addSnackbar,setAddSnackbar]=useState(false)\n  // useEffect(() => {\n  //   // dispatch({ type:'ADD_EMPLOYEE',payload:employeeData })\n  // // console.log(employeeData)\n  //   // dispatch(addEmployee(employeeData))\n  //   // console.log(\"team66\",employeeData)\n  //   activeStep === steps.length?setAddSnackbar(true):setAddSnackbar(false)\n  // })\n// const handleGet=(id)=>{\n//     api.get(`employees/${id}`).then(res=>{\n//       setEmployeeData(res.data.data)\n//       console.log(\"harsh\",res.data.data)\n//   }).catch(err=>{console.log(\"err\",err)})\n//   }\n//   useEffect(()=>{\n//     console.log(\"mehul\",id)\n//     handleGet(id)\n//   },[])\n//   const isStepOptional = step => {\n//     return step === 7 || step === 5 ;\n//   };\n\n//   const isStepSkipped = step => {\n//     return skipped.has(step);\n//   };\n\n//   const handleReset = () => {\n//     setActiveStep(0);\n//   };\n//   return (\n//     <div>\n//       <GridContainer zeroMinWidth>\n//         <GridItem xs={12} sm={12} md={12} lg={9} xl={6} zeroMinWidth>\n//           <Card>\n//             <CardHeader color=\"primary\">\n//               <h4 className={classes.cardTitleWhite}>{title}</h4>\n//               {/* <h4 className={classes.cardTitleWhite}>Add Employee</h4>\n//               <p className={classes.cardCategoryWhite}>{title}</p> */}\n//             </CardHeader>\n//             <CardBody>\n//               {/* <div className={classes.root}> */}\n//               <Stepper style={{padding:'5px 0px'}} activeStep={activeStep} alternativeLabel noWrap>\n//                 {/* connector={<QontoConnector />} */}\n//                 {steps.map((label, index) => {\n//                   const stepProps = {};\n//                   const labelProps = {};\n//                   if (isStepOptional(index)) {\n//                     labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n//                   }\n//                   if (isStepSkipped(index)) {\n//                     stepProps.completed = false;\n//                   }\n//                   return (\n//                     <Step key={label} {...stepProps}>\n//                       <StepLabel {...labelProps} noWrap>{label}</StepLabel>\n//                       {/* StepIconComponent={QontoStepIcon} */}\n//                     </Step>\n//                   );\n//                 })}\n//               </Stepper>\n//               <div>\n//                 {activeStep === steps.length ? (\n//                   <div>\n//                     <Typography className={classes.instructions}>\n//                       All steps completed - you&apos;re finished\n//             </Typography>\n//                     <Button onClick={handleReset} className={classes.button}>\n//                       Reset\n//             </Button>\n//             <Button component={Link} to=\"/admin/employees\" className={classes.button}>View Submitted Data</Button>\n//                   </div>\n//                 ) : (\n//                     <div>\n//                       <Typography className={classes.instructions}>\n//                         <EmployeeContext.Provider value={[employeeData, setEmployeeData]}>\n//                           <StepContext.Provider value={[activeStep, setActiveStep]}>\n//                             <SkipContext.Provider value={[skipped, setSkipped]}>\n//                               <TitleContext.Provider value={[title, setTitle]}>\n//                                         {getStepContent(activeStep)}\n//                               </TitleContext.Provider>\n//                             </SkipContext.Provider>\n//                           </StepContext.Provider>\n//                         </EmployeeContext.Provider>\n//                       </Typography>\n\n//                     </div>\n//                   )}\n//               </div>\n//               {/* </div> */}\n//             </CardBody>\n//           </Card>\n//         </GridItem>\n//       </GridContainer>\n//       {/* <Snackbar\n//               place=\"bl\"\n//               color=\"primary\"\n//               icon={InfoIcon}\n//               message=\"Employee Added Successfully\"\n//               open={addSnackbar}\n//               closeNotification={() => setAddSnackbar(false)}\n//               close\n//             /> */}\n//     </div>\n//   );\nreturn(\n  <div>{id}</div>\n)\n}\nexport default EditEmployee"]},"metadata":{},"sourceType":"module"}