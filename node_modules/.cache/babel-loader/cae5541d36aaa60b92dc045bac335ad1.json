{"ast":null,"code":"import _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/views/Employee/Add.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport EmployeeInformation from 'components/AddEmployeeForms/EmployeeInformation';\nimport CurrentAddress from 'components/AddEmployeeForms/CurrentAddress';\nimport PermanentAddress from 'components/AddEmployeeForms/PermanentAddress';\nimport EmergencyContact from 'components/AddEmployeeForms/EmergencyContact';\nimport JobDetails from 'components/AddEmployeeForms/JobDetails';\nimport IdProof from 'components/AddEmployeeForms/IdProof';\nimport EmployeePicture from 'components/AddEmployeeForms/EmployeePicture';\nimport Feedback from 'components/AddEmployeeForms/Feedback';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Employee from './List';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Check from '@material-ui/icons/Check';\nimport { set } from 'date-fns';\nimport { addEmployee as _addEmployee, showEmployee } from 'redux/EmployeeAction';\nimport { connect } from 'react-redux';\nvar initialValues = {\n  fullName: '',\n  preferredName: '',\n  birthDate: null,\n  gender: '',\n  maritalStatus: '',\n  currentStreet1: '',\n  currentStreet2: '',\n  currentCity: '',\n  currentState: '',\n  currentCountry: '',\n  currentAddressProof: [],\n  permanentStreet1: '',\n  permanentStreet2: '',\n  permanentCity: '',\n  permanentState: '',\n  permanentCountry: '',\n  permanentAddressProof: [],\n  emergencyName1: '',\n  emergencyMobile1: '',\n  emergencyRelationship1: '',\n  emergencyName2: '',\n  emergencyMobile2: '',\n  emergencyRelationship2: '',\n  jobHireDate: null,\n  jobSalary: '',\n  jobCurrentSalary: '',\n  jobBond: '',\n  idProof: [],\n  picture: [],\n  feedback: ''\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    button: {\n      marginRight: theme.spacing(1)\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    },\n    cardCategoryWhite: {\n      color: \"rgba(255,255,255,.62)\",\n      margin: \"0\",\n      fontSize: \"14px\",\n      marginTop: \"0\",\n      marginBottom: \"0\"\n    },\n    cardTitleWhite: {\n      color: \"#FFFFFF\",\n      // marginBottom: \"3px\",\n      // marginTop: \"0px\",\n      marginTop: \"10px\",\n      marginBottom: \"10px\",\n      minHeight: \"auto\",\n      fontWeight: \"300\",\n      fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n      textDecoration: \"none\"\n    }\n  };\n}); // const initialValues={\n//     employeeInformation:{\n//         fullName:'',\n//         preferredName:'',\n//         birthDate:'',\n//         gender:'',\n//         maritalStatus:''\n//     },\n//     currentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     permanentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     emergencyContact:{\n//         name1:'',\n//         mobile1:'',\n//         relationship1:'',\n//         name2:'',\n//         mobile2:'',\n//         relationship2:''\n//     },\n//     jobDetails:{\n//         hireDate:'',\n//         salary:'',\n//         currentSalary:'',\n//         bond:''\n//     },\n//     idProof:{\n//         idProof:''\n//     },\n//     employeePicture:{\n//         picture:''\n//     },\n//     feedback:{\n//         feedback:''\n//     }    \n// }\n// const QontoConnector = withStyles({\n//   alternativeLabel: {\n//     // top: 10,\n//     left: 'calc(-50% + 16px)',\n//     right: 'calc(50% + 16px)',\n//   },\n//   active: {\n//     '& $line': {\n//       borderColor: '#9830b0',\n//     },\n//   },\n//   completed: {\n//     '& $line': {\n//       borderColor: '#9830b0'\n//     },\n//   },\n//   line: {\n//     borderColor: '#999999',\n//     borderTopWidth: 3,\n//     borderRadius: 1,\n//   },\n// })(StepConnector);\n// const useQontoStepIconStyles = makeStyles({\n//   root: {\n//     color: 'red',\n//     display: 'flex',\n//     height: 22,\n//     alignItems: 'center',\n//   },\n//   active: {\n//     color: '#9830b0',\n//   },\n//   circle: {\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     backgroundColor: '#eaeaf0',\n//   },\n//   completed: {\n//     color: '#ffffff',\n//     backgroundColor:'#9830b0',\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     zIndex: 1,\n//     fontSize: 18,\n//   },\n// });\n// function QontoStepIcon(props) {\n//   const classes = useQontoStepIconStyles();\n//   const { active, completed } = props;\n//   return (\n//     <div>\n//       {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n//     </div>\n//   );\n// }\n\nfunction getSteps() {\n  // return ['', '', '', '', '', '', '', ''];\n  return ['Employee Information', 'Current Address', 'Permanent Address', 'Emergency Contact', 'Job Details', 'Id Proof', 'Employee Picture', 'Feedback'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return React.createElement(EmployeeInformation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      });\n\n    case 1:\n      return React.createElement(CurrentAddress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      });\n\n    case 2:\n      return React.createElement(PermanentAddress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      });\n\n    case 3:\n      return React.createElement(EmergencyContact, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      });\n\n    case 4:\n      return React.createElement(JobDetails, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      });\n\n    case 5:\n      return React.createElement(IdProof, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      });\n\n    case 6:\n      return React.createElement(EmployeePicture, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      });\n\n    case 7:\n      return React.createElement(Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      });\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport var EmployeeContext = createContext();\nexport var TitleContext = createContext();\nexport var EmployeeDataContext = createContext();\nexport var StepContext = createContext();\nexport var SkipContext = createContext(); // export const CurrentAddressProofContext = createContext()\n// export const PermanentAddressProofContext = createContext()\n// export const IdProofContext = createContext()\n// export const PictureContext = createContext()\n\nfunction AddEmployee(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(initialValues),\n      _useState4 = _slicedToArray(_useState3, 2),\n      employeeData = _useState4[0],\n      setEmployeeData = _useState4[1]; // const [currentAddressProof, setCurrentAddressProof] = useState(employeeData.currentAddressProof)\n  // const [permanentAddressProof, setPermanentAddressProof] = useState(employeeData.permanentAddressProof)\n  // const [idProof, setIdProof] = useState(employeeData.idProof)\n  // const [picture, setPicture] = useState(employeeData.picture)\n  // console.log(\"parent\", employeeData)\n\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var _React$useState3 = React.useState(new Set()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      skipped = _React$useState4[0],\n      setSkipped = _React$useState4[1];\n\n  var steps = getSteps(); // addEmployee(employeeData)\n\n  useEffect(function () {\n    console.log(\"useeffect\", props.fullName);\n\n    _addEmployee(employeeData);\n\n    console.log(employeeData);\n  }, [employeeData]); // useEffect(() => {\n  //   setCurrentAddressProof(employeeData.currentAddressProof)\n  //   setPermanentAddressProof(employeeData.permanentAddressProof)\n  //   setPicture(employeeData.picture)\n  //   setIdProof(employeeData.idProof)\n  // }, [employeeData.currentAddressProof, employeeData.permanentAddressProof, employeeData.picture, employeeData.idProof])\n  // useEffect(()=>{\n  //   setPermanentAddressProof(employeeData.permanentAddressProof)\n  // },[employeeData.permanentAddressProof])\n  // useEffect(()=>{\n  //   setPicture(employeeData.picture)\n  // },[employeeData.picture])\n  // useEffect(()=>{\n  //   setIdProof(employeeData.idProof)\n  // },[employeeData.idProof])\n\n  var isStepOptional = function isStepOptional(step) {\n    return step === 7 || step === 5;\n  };\n\n  var isStepSkipped = function isStepSkipped(step) {\n    return skipped.has(step);\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, React.createElement(GridContainer, {\n    zeroMinWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 9,\n    zeroMinWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, title)), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, React.createElement(Stepper, {\n    activeStep: activeStep,\n    alternativeLabel: true,\n    noWrap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, steps.map(function (label, index) {\n    var stepProps = {};\n    var labelProps = {};\n\n    if (isStepOptional(index)) {\n      labelProps.optional = React.createElement(Typography, {\n        variant: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, \"Optional\");\n    }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return React.createElement(Step, Object.assign({\n      key: label\n    }, stepProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(StepLabel, Object.assign({}, labelProps, {\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), label));\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, activeStep === steps.length ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, \"All steps completed - you're finished\"), React.createElement(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, \"Reset\")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343\n    },\n    __self: this\n  }, React.createElement(EmployeeContext.Provider, {\n    value: [employeeData, setEmployeeData],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344\n    },\n    __self: this\n  }, React.createElement(StepContext.Provider, {\n    value: [activeStep, setActiveStep],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, React.createElement(SkipContext.Provider, {\n    value: [skipped, setSkipped],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346\n    },\n    __self: this\n  }, React.createElement(TitleContext.Provider, {\n    value: [title, setTitle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, getStepContent(activeStep)))))))))))));\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(\"hii\", state.fullName);\n  return {\n    // name:state.name,\n    // age:state.age\n    fullName: state.fullName,\n    preferredName: state.preferredName,\n    birthDate: state.birthDate,\n    gender: state.gender,\n    maritalStatus: state.maritalStatus,\n    currentStreet1: state.currentStreet1,\n    currentStreet2: state.currentStreet2,\n    currentCity: state.currentCity,\n    currentState: state.currentState,\n    currentCountry: state.currentCountry,\n    currentAddressProof: state.currentAddressProof,\n    permanentStreet1: state.permanentStreet1,\n    permanentStreet2: state.permanentStreet2,\n    permanentCity: state.permanentCity,\n    permanentState: state.permanentState,\n    permanentCountry: state.permanentCountry,\n    permanentAddressProof: state.permanentAddressProof,\n    emergencyName1: state.emergencyName1,\n    emergencyMobile1: state.emergencyMobile1,\n    emergencyRelationship1: state.emergencyRelationship1,\n    emergencyName2: state.emergencyName2,\n    emergencyMobile2: state.emergencyMobile2,\n    emergencyRelationship2: state.emergencyRelationship2,\n    jobHireDate: state.jobHireDate,\n    jobSalary: state.jobSalary,\n    jobCurrentSalary: state.jobCurrentSalary,\n    jobBond: state.jobBond,\n    idProof: state.idProof,\n    picture: state.picture,\n    feedback: state.feedback\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    // showEmployee:()=>dispatch(showEmployee()),\n    addEmployee: function addEmployee() {\n      return dispatch(_addEmployee);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployee);","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/views/Employee/Add.js"],"names":["React","createContext","useState","useEffect","EmployeeInformation","CurrentAddress","PermanentAddress","EmergencyContact","JobDetails","IdProof","EmployeePicture","Feedback","Stepper","Step","StepLabel","Button","Typography","Card","CardHeader","CardBody","GridItem","GridContainer","makeStyles","withStyles","Link","Employee","StepConnector","Check","set","addEmployee","showEmployee","connect","initialValues","fullName","preferredName","birthDate","gender","maritalStatus","currentStreet1","currentStreet2","currentCity","currentState","currentCountry","currentAddressProof","permanentStreet1","permanentStreet2","permanentCity","permanentState","permanentCountry","permanentAddressProof","emergencyName1","emergencyMobile1","emergencyRelationship1","emergencyName2","emergencyMobile2","emergencyRelationship2","jobHireDate","jobSalary","jobCurrentSalary","jobBond","idProof","picture","feedback","useStyles","theme","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","cardCategoryWhite","color","margin","fontSize","cardTitleWhite","minHeight","fontWeight","fontFamily","textDecoration","getSteps","getStepContent","step","EmployeeContext","TitleContext","EmployeeDataContext","StepContext","SkipContext","AddEmployee","props","title","setTitle","employeeData","setEmployeeData","classes","activeStep","setActiveStep","Set","skipped","setSkipped","steps","console","log","isStepOptional","isStepSkipped","has","handleReset","map","label","index","stepProps","labelProps","optional","completed","length","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport EmployeeInformation from 'components/AddEmployeeForms/EmployeeInformation';\nimport CurrentAddress from 'components/AddEmployeeForms/CurrentAddress';\nimport PermanentAddress from 'components/AddEmployeeForms/PermanentAddress';\nimport EmergencyContact from 'components/AddEmployeeForms/EmergencyContact';\nimport JobDetails from 'components/AddEmployeeForms/JobDetails';\nimport IdProof from 'components/AddEmployeeForms/IdProof';\nimport EmployeePicture from 'components/AddEmployeeForms/EmployeePicture';\nimport Feedback from 'components/AddEmployeeForms/Feedback';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {Link} from 'react-router-dom'\nimport Employee from './List';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Check from '@material-ui/icons/Check';\nimport { set } from 'date-fns';\nimport { addEmployee,showEmployee } from 'redux/EmployeeAction'\nimport {connect} from 'react-redux'\n\nconst initialValues = {\n  fullName: '',\n  preferredName: '',\n  birthDate: null,\n  gender: '',\n  maritalStatus: '',\n  currentStreet1: '',\n  currentStreet2: '',\n  currentCity: '',\n  currentState: '',\n  currentCountry: '',\n  currentAddressProof: [],\n  permanentStreet1: '',\n  permanentStreet2: '',\n  permanentCity: '',\n  permanentState: '',\n  permanentCountry: '',\n  permanentAddressProof: [],\n  emergencyName1: '',\n  emergencyMobile1: '',\n  emergencyRelationship1: '',\n  emergencyName2: '',\n  emergencyMobile2: '',\n  emergencyRelationship2: '',\n  jobHireDate: null,\n  jobSalary: '',\n  jobCurrentSalary: '',\n  jobBond: '',\n  idProof: [],\n  picture: [],\n  feedback: ''\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  cardCategoryWhite: {\n    color: \"rgba(255,255,255,.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\"\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    // marginBottom: \"3px\",\n    // marginTop: \"0px\",\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    textDecoration: \"none\"\n  }\n}));\n\n\n// const initialValues={\n//     employeeInformation:{\n//         fullName:'',\n//         preferredName:'',\n//         birthDate:'',\n//         gender:'',\n//         maritalStatus:''\n//     },\n//     currentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     permanentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     emergencyContact:{\n//         name1:'',\n//         mobile1:'',\n//         relationship1:'',\n//         name2:'',\n//         mobile2:'',\n//         relationship2:''\n//     },\n//     jobDetails:{\n//         hireDate:'',\n//         salary:'',\n//         currentSalary:'',\n//         bond:''\n//     },\n//     idProof:{\n//         idProof:''\n//     },\n//     employeePicture:{\n//         picture:''\n//     },\n//     feedback:{\n//         feedback:''\n//     }    \n// }\n// const QontoConnector = withStyles({\n//   alternativeLabel: {\n//     // top: 10,\n//     left: 'calc(-50% + 16px)',\n//     right: 'calc(50% + 16px)',\n//   },\n//   active: {\n//     '& $line': {\n//       borderColor: '#9830b0',\n//     },\n//   },\n//   completed: {\n//     '& $line': {\n//       borderColor: '#9830b0'\n//     },\n//   },\n//   line: {\n//     borderColor: '#999999',\n//     borderTopWidth: 3,\n//     borderRadius: 1,\n//   },\n// })(StepConnector);\n\n// const useQontoStepIconStyles = makeStyles({\n//   root: {\n//     color: 'red',\n//     display: 'flex',\n//     height: 22,\n//     alignItems: 'center',\n//   },\n//   active: {\n//     color: '#9830b0',\n//   },\n//   circle: {\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     backgroundColor: '#eaeaf0',\n\n//   },\n//   completed: {\n//     color: '#ffffff',\n//     backgroundColor:'#9830b0',\n//     width: 25,\n//     height: 25,\n//     borderRadius: '50%',\n//     zIndex: 1,\n//     fontSize: 18,\n//   },\n// });\n// function QontoStepIcon(props) {\n//   const classes = useQontoStepIconStyles();\n//   const { active, completed } = props;\n\n//   return (\n//     <div>\n//       {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n//     </div>\n//   );\n// }\nfunction getSteps() {\n  // return ['', '', '', '', '', '', '', ''];\n  return ['Employee Information', 'Current Address', 'Permanent Address', 'Emergency Contact', 'Job Details', 'Id Proof', 'Employee Picture', 'Feedback'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return <EmployeeInformation />;\n    case 1:\n      return <CurrentAddress />;\n    case 2:\n      return <PermanentAddress />;\n    case 3:\n      return <EmergencyContact />;\n    case 4:\n      return <JobDetails />;\n    case 5:\n      return <IdProof />;\n    case 6:\n      return <EmployeePicture />;\n    case 7:\n      return <Feedback />;\n    default:\n      return 'Unknown step';\n  }\n}\n\n\nexport const EmployeeContext = createContext()\nexport const TitleContext = createContext()\nexport const EmployeeDataContext = createContext()\nexport const StepContext = createContext()\nexport const SkipContext = createContext()\n// export const CurrentAddressProofContext = createContext()\n// export const PermanentAddressProofContext = createContext()\n// export const IdProofContext = createContext()\n// export const PictureContext = createContext()\n\nfunction AddEmployee(props) {\n  const [title, setTitle] = useState('')\n  const [employeeData, setEmployeeData] = useState(initialValues)\n  // const [currentAddressProof, setCurrentAddressProof] = useState(employeeData.currentAddressProof)\n  // const [permanentAddressProof, setPermanentAddressProof] = useState(employeeData.permanentAddressProof)\n  // const [idProof, setIdProof] = useState(employeeData.idProof)\n  // const [picture, setPicture] = useState(employeeData.picture)\n  // console.log(\"parent\", employeeData)\n\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n  // addEmployee(employeeData)\n  useEffect(() => {\n    console.log(\"useeffect\",props.fullName)\n    addEmployee(employeeData)\n    console.log(employeeData)\n  }, [employeeData])\n\n\n  // useEffect(() => {\n  //   setCurrentAddressProof(employeeData.currentAddressProof)\n  //   setPermanentAddressProof(employeeData.permanentAddressProof)\n  //   setPicture(employeeData.picture)\n  //   setIdProof(employeeData.idProof)\n  // }, [employeeData.currentAddressProof, employeeData.permanentAddressProof, employeeData.picture, employeeData.idProof])\n\n  // useEffect(()=>{\n  //   setPermanentAddressProof(employeeData.permanentAddressProof)\n  // },[employeeData.permanentAddressProof])\n\n  // useEffect(()=>{\n  //   setPicture(employeeData.picture)\n  // },[employeeData.picture])\n\n  // useEffect(()=>{\n  //   setIdProof(employeeData.idProof)\n  // },[employeeData.idProof])\n\n  const isStepOptional = step => {\n    return step === 7 || step === 5;\n  };\n\n  const isStepSkipped = step => {\n    return skipped.has(step);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n  return (\n    <div>\n      <GridContainer zeroMinWidth>\n        <GridItem xs={12} sm={12} md={9} zeroMinWidth>\n          <Card>\n            <CardHeader color=\"primary\">\n              <h4 className={classes.cardTitleWhite}>{title}</h4>\n              {/* <h4 className={classes.cardTitleWhite}>Add Employee</h4>\n              <p className={classes.cardCategoryWhite}>{title}</p> */}\n            </CardHeader>\n            <CardBody>\n              {/* <div className={classes.root}> */}\n              <Stepper activeStep={activeStep} alternativeLabel noWrap>\n                {/* connector={<QontoConnector />} */}\n                {steps.map((label, index) => {\n                  const stepProps = {};\n                  const labelProps = {};\n                  if (isStepOptional(index)) {\n                    labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n                  }\n                  if (isStepSkipped(index)) {\n                    stepProps.completed = false;\n                  }\n                  return (\n                    <Step key={label} {...stepProps}>\n                      <StepLabel {...labelProps} noWrap>{label}</StepLabel>\n                      {/* StepIconComponent={QontoStepIcon} */}\n                    </Step>\n                  );\n                })}\n              </Stepper>\n              <div>\n                {activeStep === steps.length ? (\n                  <div>\n                    <Typography className={classes.instructions}>\n                      All steps completed - you&apos;re finished\n            </Typography>\n                    <Button onClick={handleReset} className={classes.button}>\n                      Reset\n            </Button>\n          \n            {/* <Button component={Link} to=\"/admin/employee\" className={classes.button}>View Submitted Data</Button> */}\n           \n{/*             \n            <Link component={Button} className={classes.button} to={{\n      pathname: '/admin/employee',\n      state: { data: employeeData }\n    }}>View Submitted Data</Link> */}\n                  </div>\n                ) : (\n                    <div>\n                      <Typography className={classes.instructions}>\n                        <EmployeeContext.Provider value={[employeeData, setEmployeeData]}>\n                          <StepContext.Provider value={[activeStep, setActiveStep]}>\n                            <SkipContext.Provider value={[skipped, setSkipped]}>\n                              <TitleContext.Provider value={[title, setTitle]}>\n                                {/* <CurrentAddressProofContext.Provider value={[currentAddressProof, setCurrentAddressProof]}>\n                                  <PermanentAddressProofContext.Provider value={[permanentAddressProof, setPermanentAddressProof]}>\n                                    <IdProofContext.Provider value={[idProof, setIdProof]}>\n                                      <PictureContext.Provider value={[picture, setPicture]}> */}\n                                        {getStepContent(activeStep)}\n                                      {/* </PictureContext.Provider>\n                                    </IdProofContext.Provider>\n                                  </PermanentAddressProofContext.Provider>\n                                </CurrentAddressProofContext.Provider> */}\n                              </TitleContext.Provider>\n                            </SkipContext.Provider>\n                          </StepContext.Provider>\n                        </EmployeeContext.Provider>\n                      </Typography>\n\n                    </div>\n                  )}\n              </div>\n              {/* </div> */}\n            </CardBody>\n          </Card>\n        </GridItem>\n      </GridContainer>\n      {/* <EmployeeDataContext.Provider value={employeeData}></EmployeeDataContext.Provider> */}\n    </div>\n  );\n}\nconst mapStateToProps=state=>{\n  console.log(\"hii\",state.fullName)\n  return{\n      // name:state.name,\n      // age:state.age\n      fullName: state.fullName,\n      preferredName: state.preferredName,\n      birthDate: state.birthDate,\n      gender: state.gender,\n      maritalStatus: state.maritalStatus,\n      currentStreet1: state.currentStreet1,\n      currentStreet2: state.currentStreet2,\n      currentCity: state.currentCity,\n      currentState: state.currentState,\n      currentCountry: state.currentCountry,\n      currentAddressProof: state.currentAddressProof,\n      permanentStreet1: state.permanentStreet1,\n      permanentStreet2: state.permanentStreet2,\n      permanentCity: state.permanentCity,\n      permanentState: state.permanentState,\n      permanentCountry: state.permanentCountry,\n      permanentAddressProof: state.permanentAddressProof,\n      emergencyName1: state.emergencyName1,\n      emergencyMobile1: state.emergencyMobile1,\n      emergencyRelationship1: state.emergencyRelationship1,\n      emergencyName2: state.emergencyName2,\n      emergencyMobile2: state.emergencyMobile2,\n      emergencyRelationship2: state.emergencyRelationship2,\n      jobHireDate: state.jobHireDate,\n      jobSalary: state.jobSalary,\n      jobCurrentSalary: state.jobCurrentSalary,\n      jobBond: state.jobBond,\n      idProof: state.idProof,\n      picture: state.picture,\n      feedback: state.feedback\n  }\n}\nconst mapDispatchToProps=dispatch=>{\n  return{\n    // showEmployee:()=>dispatch(showEmployee()),\n      addEmployee:()=>dispatch(addEmployee)  \n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(AddEmployee)"]},"metadata":{},"sourceType":"module"}