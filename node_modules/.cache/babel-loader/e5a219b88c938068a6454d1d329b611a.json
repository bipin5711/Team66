{"ast":null,"code":"import _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/views/Employee/Add.js\";\nimport React, { createContext, useState } from 'react';\nimport EmployeeInformation from 'components/AddEmployeeForms/EmployeeInformation';\nimport CurrentAddress from 'components/AddEmployeeForms/CurrentAddress';\nimport PermanentAddress from 'components/AddEmployeeForms/PermanentAddress';\nimport EmergencyContact from 'components/AddEmployeeForms/EmergencyContact';\nimport JobDetails from 'components/AddEmployeeForms/JobDetails';\nimport IdProof from 'components/AddEmployeeForms/IdProof';\nimport EmployeePicture from 'components/AddEmployeeForms/EmployeePicture';\nimport Feedback from 'components/AddEmployeeForms/Feedback';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Employee from './List';\nimport StepConnector from '@material-ui/core/StepConnector';\nvar initialValues = {\n  fullName: '',\n  preferredName: '',\n  birthDate: '',\n  gender: 'male',\n  maritalStatus: 'single',\n  currentStreet1: '',\n  currentStreet2: '',\n  currentCity: '',\n  currentState: '',\n  currentCountry: '',\n  currentAddressProof: '',\n  permanentStreet1: '',\n  permanentStreet2: '',\n  permanentCity: '',\n  permanentState: '',\n  permanentCountry: '',\n  permanentAddressProof: '',\n  emergencyName1: '',\n  emergencyMobile1: '',\n  emergencyRelationship1: '',\n  emergencyName2: '',\n  emergencyMobile2: '',\n  emergencyRelationship2: '',\n  jobHireDate: '',\n  jobSalary: '',\n  jobCurrentSalary: '',\n  jobBond: '',\n  idProof: '',\n  picture: '',\n  feedback: ''\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    button: {\n      marginRight: theme.spacing(1)\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    },\n    cardCategoryWhite: {\n      color: \"rgba(255,255,255,.62)\",\n      margin: \"0\",\n      fontSize: \"14px\",\n      marginTop: \"0\",\n      marginBottom: \"0\"\n    },\n    cardTitleWhite: {\n      color: \"#FFFFFF\",\n      // marginBottom: \"3px\",\n      // marginTop: \"0px\",\n      marginTop: \"10px\",\n      marginBottom: \"10px\",\n      minHeight: \"auto\",\n      fontWeight: \"300\",\n      fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n      textDecoration: \"none\"\n    }\n  };\n}); // const initialValues={\n//     employeeInformation:{\n//         fullName:'',\n//         preferredName:'',\n//         birthDate:'',\n//         gender:'',\n//         maritalStatus:''\n//     },\n//     currentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     permanentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     emergencyContact:{\n//         name1:'',\n//         mobile1:'',\n//         relationship1:'',\n//         name2:'',\n//         mobile2:'',\n//         relationship2:''\n//     },\n//     jobDetails:{\n//         hireDate:'',\n//         salary:'',\n//         currentSalary:'',\n//         bond:''\n//     },\n//     idProof:{\n//         idProof:''\n//     },\n//     employeePicture:{\n//         picture:''\n//     },\n//     feedback:{\n//         feedback:''\n//     }    \n// }\n\nvar QontoConnector = withStyles({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 16px)',\n    right: 'calc(50% + 16px)'\n  },\n  active: {\n    '& $line': {\n      borderColor: 'red'\n    }\n  },\n  completed: {\n    '& $line': {\n      borderColor: '#784af4'\n    }\n  },\n  line: {\n    borderColor: '#eaeaf0',\n    borderTopWidth: 3,\n    borderRadius: 1\n  }\n})(StepConnector);\n\nfunction getSteps() {\n  return ['', '', '', '', '', '', '', '']; // return ['Employee Information', 'Current Address', 'Permanent Address', 'Emergency Contact', 'Job Details', 'Id Prrof', 'Employee Picture', 'Feedback'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return React.createElement(EmployeeInformation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      });\n\n    case 1:\n      return React.createElement(CurrentAddress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      });\n\n    case 2:\n      return React.createElement(PermanentAddress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      });\n\n    case 3:\n      return React.createElement(EmergencyContact, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      });\n\n    case 4:\n      return React.createElement(JobDetails, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      });\n\n    case 5:\n      return React.createElement(IdProof, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      });\n\n    case 6:\n      return React.createElement(EmployeePicture, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      });\n\n    case 7:\n      return React.createElement(Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      });\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport var EmployeeContext = createContext();\nexport var TitleContext = createContext();\nexport var EmployeeDataContext = createContext();\nexport var StepContext = createContext();\nexport var SkipContext = createContext();\nexport default function AddEmployee(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(initialValues),\n      _useState4 = _slicedToArray(_useState3, 2),\n      employeeData = _useState4[0],\n      setEmployeeData = _useState4[1];\n\n  console.log(\"parent\", employeeData);\n  var classes = useStyles();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var _React$useState3 = React.useState(new Set()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      skipped = _React$useState4[0],\n      setSkipped = _React$useState4[1];\n\n  var steps = getSteps();\n\n  var isStepOptional = function isStepOptional(step) {\n    return step === 7 || step === 5;\n  };\n\n  var isStepSkipped = function isStepSkipped(step) {\n    return skipped.has(step);\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(GridContainer, {\n    zeroMinWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 9,\n    zeroMinWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, title)), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(Stepper, {\n    activeStep: activeStep,\n    connector: React.createElement(QontoConnector, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }),\n    noWrap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, steps.map(function (label, index) {\n    var stepProps = {};\n    var labelProps = {};\n\n    if (isStepOptional(index)) {\n      labelProps.optional = React.createElement(Typography, {\n        variant: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Optional\");\n    }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return React.createElement(Step, Object.assign({\n      key: label\n    }, stepProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(StepLabel, Object.assign({}, labelProps, {\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), label));\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, activeStep === steps.length ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"All steps completed - you're finished\"), React.createElement(Button, {\n    onClick: handleReset,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, \"Reset\")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(EmployeeContext.Provider, {\n    value: [employeeData, setEmployeeData],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, React.createElement(StepContext.Provider, {\n    value: [activeStep, setActiveStep],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, React.createElement(SkipContext.Provider, {\n    value: [skipped, setSkipped],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(TitleContext.Provider, {\n    value: [title, setTitle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, getStepContent(activeStep)))))))))))));\n}","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/views/Employee/Add.js"],"names":["React","createContext","useState","EmployeeInformation","CurrentAddress","PermanentAddress","EmergencyContact","JobDetails","IdProof","EmployeePicture","Feedback","Stepper","Step","StepLabel","Button","Typography","Card","CardHeader","CardBody","GridItem","GridContainer","makeStyles","withStyles","Employee","StepConnector","initialValues","fullName","preferredName","birthDate","gender","maritalStatus","currentStreet1","currentStreet2","currentCity","currentState","currentCountry","currentAddressProof","permanentStreet1","permanentStreet2","permanentCity","permanentState","permanentCountry","permanentAddressProof","emergencyName1","emergencyMobile1","emergencyRelationship1","emergencyName2","emergencyMobile2","emergencyRelationship2","jobHireDate","jobSalary","jobCurrentSalary","jobBond","idProof","picture","feedback","useStyles","theme","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","cardCategoryWhite","color","margin","fontSize","cardTitleWhite","minHeight","fontWeight","fontFamily","textDecoration","QontoConnector","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","getSteps","getStepContent","step","EmployeeContext","TitleContext","EmployeeDataContext","StepContext","SkipContext","AddEmployee","props","title","setTitle","employeeData","setEmployeeData","console","log","classes","activeStep","setActiveStep","Set","skipped","setSkipped","steps","isStepOptional","isStepSkipped","has","handleReset","map","label","index","stepProps","labelProps","optional","length"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from 'react';\nimport EmployeeInformation from 'components/AddEmployeeForms/EmployeeInformation';\nimport CurrentAddress from 'components/AddEmployeeForms/CurrentAddress';\nimport PermanentAddress from 'components/AddEmployeeForms/PermanentAddress';\nimport EmergencyContact from 'components/AddEmployeeForms/EmergencyContact';\nimport JobDetails from 'components/AddEmployeeForms/JobDetails';\nimport IdProof from 'components/AddEmployeeForms/IdProof';\nimport EmployeePicture from 'components/AddEmployeeForms/EmployeePicture';\nimport Feedback from 'components/AddEmployeeForms/Feedback';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Employee from './List';\nimport StepConnector from '@material-ui/core/StepConnector';\n\nconst initialValues = {\n  fullName: '',\n  preferredName: '',\n  birthDate: '',\n  gender: 'male',\n  maritalStatus: 'single',\n  currentStreet1: '',\n  currentStreet2: '',\n  currentCity: '',\n  currentState: '',\n  currentCountry: '',\n  currentAddressProof: '',\n  permanentStreet1: '',\n  permanentStreet2: '',\n  permanentCity: '',\n  permanentState: '',\n  permanentCountry: '',\n  permanentAddressProof: '',\n  emergencyName1: '',\n  emergencyMobile1: '',\n  emergencyRelationship1: '',\n  emergencyName2: '',\n  emergencyMobile2: '',\n  emergencyRelationship2: '',\n  jobHireDate: '',\n  jobSalary: '',\n  jobCurrentSalary: '',\n  jobBond: '',\n  idProof: '',\n  picture: '',\n  feedback: ''\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  cardCategoryWhite: {\n    color: \"rgba(255,255,255,.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\"\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    // marginBottom: \"3px\",\n    // marginTop: \"0px\",\n    marginTop:\"10px\",\n    marginBottom: \"10px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    textDecoration: \"none\"\n  }\n}));\n\n\n// const initialValues={\n//     employeeInformation:{\n//         fullName:'',\n//         preferredName:'',\n//         birthDate:'',\n//         gender:'',\n//         maritalStatus:''\n//     },\n//     currentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     permanentAddress:{\n//         street1:'',\n//         street2:'',\n//         city:'',\n//         state:'',\n//         country:'',\n//         addressProof:''\n//     },\n//     emergencyContact:{\n//         name1:'',\n//         mobile1:'',\n//         relationship1:'',\n//         name2:'',\n//         mobile2:'',\n//         relationship2:''\n//     },\n//     jobDetails:{\n//         hireDate:'',\n//         salary:'',\n//         currentSalary:'',\n//         bond:''\n//     },\n//     idProof:{\n//         idProof:''\n//     },\n//     employeePicture:{\n//         picture:''\n//     },\n//     feedback:{\n//         feedback:''\n//     }    \n// }\nconst QontoConnector = withStyles({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 16px)',\n    right: 'calc(50% + 16px)',\n  },\n  active: {\n    '& $line': {\n      borderColor: 'red',\n    },\n  },\n  completed: {\n    '& $line': {\n      borderColor: '#784af4',\n    },\n  },\n  line: {\n    borderColor: '#eaeaf0',\n    borderTopWidth: 3,\n    borderRadius: 1,\n  },\n})(StepConnector);\nfunction getSteps() {\n  return ['', '', '', '', '', '', '', ''];\n  // return ['Employee Information', 'Current Address', 'Permanent Address', 'Emergency Contact', 'Job Details', 'Id Prrof', 'Employee Picture', 'Feedback'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return <EmployeeInformation />;\n    case 1:\n      return <CurrentAddress />;\n    case 2:\n      return <PermanentAddress />;\n    case 3:\n      return <EmergencyContact />;\n    case 4:\n      return <JobDetails />;\n    case 5:\n      return <IdProof />;\n    case 6:\n      return <EmployeePicture />;\n    case 7:\n      return <Feedback />;\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport const EmployeeContext = createContext()\nexport const TitleContext = createContext()\nexport const EmployeeDataContext = createContext()\nexport const StepContext = createContext()\nexport const SkipContext = createContext()\n\nexport default function AddEmployee(props) {\n  const [title,setTitle]=useState('')\n  const [employeeData, setEmployeeData] = useState(initialValues)\n  console.log(\"parent\", employeeData)\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const isStepOptional = step => {\n    return step === 7 || step === 5;\n  };\n\n  const isStepSkipped = step => {\n    return skipped.has(step);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n  return (\n    <div>\n      <GridContainer zeroMinWidth>\n        <GridItem xs={12} sm={12} md={9} zeroMinWidth>\n          <Card>\n            <CardHeader color=\"primary\">\n            <h4 className={classes.cardTitleWhite}>{title}</h4>\n              {/* <h4 className={classes.cardTitleWhite}>Add Employee</h4>\n              <p className={classes.cardCategoryWhite}>{title}</p> */}\n            </CardHeader>\n            <CardBody>\n              {/* <div className={classes.root}> */}\n                <Stepper activeStep={activeStep} connector={<QontoConnector />} noWrap> \n                  {steps.map((label, index) => {\n                    const stepProps = {};\n                    const labelProps = {};\n                    if (isStepOptional(index)) {\n                      labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n                    }\n                    if (isStepSkipped(index)) {\n                      stepProps.completed = false;\n                    }\n                    return (\n                      <Step key={label} {...stepProps}>\n                        <StepLabel {...labelProps} noWrap>{label}</StepLabel>\n                      </Step>\n                    );\n                  })}\n                </Stepper>\n                <div>\n                  {activeStep === steps.length ? (\n                    <div>\n                      <Typography className={classes.instructions}>\n                        All steps completed - you&apos;re finished\n            </Typography>\n                      <Button onClick={handleReset} className={classes.button}>\n                        Reset\n            </Button>\n                    </div>\n                  ) : (\n                      <div>\n                        <Typography className={classes.instructions}>\n                          <EmployeeContext.Provider value={[employeeData, setEmployeeData]}>\n                            <StepContext.Provider value={[activeStep, setActiveStep]}>\n                              <SkipContext.Provider value={[skipped, setSkipped]}>\n                                <TitleContext.Provider value={[title,setTitle]}>\n                                {getStepContent(activeStep)}\n                                </TitleContext.Provider>\n                              </SkipContext.Provider>\n                            </StepContext.Provider>\n                          </EmployeeContext.Provider>\n                        </Typography>\n\n                      </div>\n                    )}\n                </div>\n              {/* </div> */}\n            </CardBody>\n          </Card>\n        </GridItem>\n      </GridContainer>\n      {/* <EmployeeDataContext.Provider value={employeeData}></EmployeeDataContext.Provider> */}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}