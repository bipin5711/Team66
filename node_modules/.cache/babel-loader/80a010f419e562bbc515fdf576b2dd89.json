{"ast":null,"code":"import _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/Loader/Loader.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nvar styles = {\n  // circleBackground: {\n  //     fill: 'none',\n  // },\n  // circleProgress: {\n  //     fill: 'none',\n  // },\n  circleBackground: {\n    fill: 'none',\n    stroke: '#ddd'\n  },\n  circleProgress: {\n    fill: 'none',\n    stroke: 'red',\n    strokeLinecap: 'round',\n    strokeLinejoin: 'round'\n  },\n  circleText: {\n    fontSize: '3em',\n    fontWeight: 'bold',\n    fill: 'red'\n  }\n};\nvar useStyles = makeStyles(styles);\n\nfunction Loader(_ref) {\n  var sqSize = _ref.sqSize,\n      strokeWidth = _ref.strokeWidth;\n  var classes = useStyles();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      percentage = _useState2[0],\n      setPercentage = _useState2[1];\n\n  setTimeout(function () {\n    percentage === 100 ? setPercentage(0) : setPercentage(percentage + 1);\n  }, 10); // Size of the enclosing square\n  // const sqSize = this.props.sqSize;\n  // SVG centers the stroke width on the radius, subtract out so circle fits in square\n\n  var radius = (sqSize - strokeWidth) / 2; // Enclose cicle in a circumscribing square\n\n  var viewBox = \"0 0 \".concat(sqSize, \" \").concat(sqSize); // Arc length at 100% coverage is the circle circumference\n\n  var dashArray = radius * 3.14 * 2; // Scale 100% coverage overlay with the actual percent\n\n  var dashOffset = dashArray - dashArray * percentage / 100;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    width: sqSize,\n    height: sqSize,\n    viewBox: viewBox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"circle\", {\n    className: classes.circleBackground,\n    cx: sqSize / 2,\n    cy: sqSize / 2,\n    r: radius,\n    strokeWidth: \"\".concat(strokeWidth, \"px\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"circle\", {\n    className: classes.circleProgress,\n    cx: sqSize / 2,\n    cy: sqSize / 2,\n    r: radius,\n    strokeWidth: \"\".concat(strokeWidth, \"px\") // Start progress marker at 12 O'Clock\n    ,\n    transform: \"rotate(-90 \".concat(sqSize / 2, \" \").concat(sqSize / 2, \")\"),\n    style: {\n      strokeDasharray: dashArray,\n      strokeDashoffset: dashOffset\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"text\", {\n    className: \"circle-text\",\n    x: \"50%\",\n    y: \"50%\",\n    dy: \".3em\",\n    textAnchor: \"middle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"\".concat(percentage, \"%\"))));\n}\n\nexport default Loader;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/Loader/Loader.js"],"names":["React","useState","makeStyles","styles","circleBackground","fill","stroke","circleProgress","strokeLinecap","strokeLinejoin","circleText","fontSize","fontWeight","useStyles","Loader","sqSize","strokeWidth","classes","percentage","setPercentage","setTimeout","radius","viewBox","dashArray","dashOffset","strokeDasharray","strokeDashoffset"],"mappings":"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","sourcesContent":["import React ,{useState} from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst styles = {\n    // circleBackground: {\n    //     fill: 'none',\n    // },\n    // circleProgress: {\n    //     fill: 'none',\n    // },\n    circleBackground: {\n        fill: 'none',\n        stroke: '#ddd',   \n    },\n    circleProgress: {\n        fill: 'none',\n        stroke: 'red',\n      strokeLinecap: 'round',\n      strokeLinejoin: 'round',\n},\ncircleText: {\n    fontSize: '3em',\n    fontWeight: 'bold',\n    fill: 'red',\n  }\n}\n    \nconst useStyles = makeStyles(styles);\n\n  \nfunction Loader({sqSize,strokeWidth}) {\n    const classes = useStyles();\n    const [percentage,setPercentage]=useState(0)\n    setTimeout(() => {\n        \n        percentage===100?setPercentage(0):setPercentage(percentage+1)\n      }, 10);\n    // Size of the enclosing square\n    // const sqSize = this.props.sqSize;\n    // SVG centers the stroke width on the radius, subtract out so circle fits in square\n    const radius = (sqSize - strokeWidth) / 2;\n    // Enclose cicle in a circumscribing square\n    const viewBox = `0 0 ${sqSize} ${sqSize}`;\n    // Arc length at 100% coverage is the circle circumference\n    const dashArray = radius * 3.14 * 2;\n    // Scale 100% coverage overlay with the actual percent\n    const dashOffset = dashArray - dashArray * percentage / 100;\n    return (\n        <div>\n             <svg\n          width={sqSize}\n          height={sqSize}\n          viewBox={viewBox}\n        >\n          <circle\n            className={classes.circleBackground}\n            cx={sqSize / 2}\n            cy={sqSize / 2}\n            r={radius}\n            strokeWidth={`${strokeWidth}px`}\n             />\n          <circle\n            className={classes.circleProgress}\n            cx={sqSize / 2}\n            cy={sqSize / 2}\n            r={radius}\n            strokeWidth={`${strokeWidth}px`}\n            // Start progress marker at 12 O'Clock\n            transform={`rotate(-90 ${sqSize / 2} ${sqSize / 2})`}\n            style={{\n              strokeDasharray: dashArray,\n              strokeDashoffset: dashOffset\n            }} \n            />\n          <text\n            className=\"circle-text\"\n            x=\"50%\"\n            y=\"50%\"\n            dy=\".3em\"\n            textAnchor=\"middle\">\n            {`${percentage}%`}\n          </text>\n      </svg>\n        </div>\n    );\n}\n\nexport default Loader;"]},"metadata":{},"sourceType":"module"}