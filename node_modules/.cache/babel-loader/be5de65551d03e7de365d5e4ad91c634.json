{"ast":null,"code":"import _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/Dropzone/Dropzone.js\";\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone'; // import {DropzoneArea} from 'material-ui-dropzone'\n\nvar dropzoneStyle = {\n  width: \"100%\",\n  height: \"auto\",\n  borderWidth: 2,\n  borderColor: \"rgb(102, 102, 102)\",\n  borderStyle: \"dashed\",\n  borderRadius: 5\n};\n\nfunction CustomDropzone(props) {\n  var field = props.field,\n      form = props.form,\n      values = props.values,\n      rest = _objectWithoutProperties(props, [\"field\", \"form\", \"values\"]);\n\n  var error = form.touched[field.name] && form.errors[field.name];\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      filename = _useState2[0],\n      setFilename = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      file = _useState4[0],\n      setFile = _useState4[1];\n\n  function handleOnDrop(files, rejectedFiles) {\n    // const curfile = files[0]\n    // setFilename(files[0].name)\n    // form.setFieldValue(field.name, files[0].name)\n    // const reader = new FileReader()\n    // reader.addEventListener(\"load\", () => {\n    //   setFile(reader.result)\n    // }, false)\n    // reader.readAsDataURL(curfile)\n    var counter = 0;\n    files.forEach(function (file) {\n      console.log(file);\n      form.setFieldValue(field.name, file[counter]);\n      var reader = new FileReader();\n      reader.addEventListener(\"load\", function () {\n        setFile(reader.result);\n      }, false);\n      reader.readAsArrayBuffer(file);\n      counter = counter + 1;\n    });\n  }\n\n  return React.createElement(Dropzone, {\n    onDrop: handleOnDrop // onChange={(e) => form.setFieldValue(field.name, e)}\n    ,\n    multiple: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps;\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Add file\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), filename === \"\" ? \"\" : filename)));\n  });\n}\n\nCustomDropzone.propTypes = {\n  field: PropTypes.objectOf({\n    name: PropTypes.string\n  }).isRequired,\n  form: PropTypes.objectOf({\n    touched: PropTypes.instanceOf(Array),\n    errors: PropTypes.instanceOf(Array)\n  }).isRequired\n};\nexport default CustomDropzone;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/Dropzone/Dropzone.js"],"names":["React","useState","useContext","PropTypes","Dropzone","dropzoneStyle","width","height","borderWidth","borderColor","borderStyle","borderRadius","CustomDropzone","props","field","form","values","rest","error","touched","name","errors","filename","setFilename","file","setFile","handleOnDrop","files","rejectedFiles","counter","forEach","console","log","setFieldValue","reader","FileReader","addEventListener","result","readAsArrayBuffer","getRootProps","getInputProps","propTypes","objectOf","string","isRequired","instanceOf","Array"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\n// import {DropzoneArea} from 'material-ui-dropzone'\n\nconst dropzoneStyle = {\n  width: \"100%\",\n  height: \"auto\",\n  borderWidth: 2,\n  borderColor: \"rgb(102, 102, 102)\",\n  borderStyle: \"dashed\",\n  borderRadius: 5,\n}\nfunction CustomDropzone(props) {\n\n  const { field, form,values, ...rest } = props;\n  const error = form.touched[field.name] && form.errors[field.name];\n  const [filename, setFilename] = useState('')\n  const [file, setFile] = useState('')\n\n  function handleOnDrop(files, rejectedFiles) {\n    // const curfile = files[0]\n    // setFilename(files[0].name)\n    // form.setFieldValue(field.name, files[0].name)\n    // const reader = new FileReader()\n    // reader.addEventListener(\"load\", () => {\n    //   setFile(reader.result)\n    // }, false)\n    // reader.readAsDataURL(curfile)\n    let counter=0\n    files.forEach((file) => {\n      console.log(file)\n        form.setFieldValue(field.name, file[counter])\n      const reader = new FileReader()\n      reader.addEventListener(\"load\", () => {\n          setFile(reader.result)\n        }, false)\n   \n      reader.readAsArrayBuffer(file)\n    counter=counter+1\n  })\n  }\n  \n  return (\n    <Dropzone \n    \n      onDrop={handleOnDrop}\n      // onChange={(e) => form.setFieldValue(field.name, e)}\n      multiple=\"true\">\n      {({ getRootProps, getInputProps }) => (\n        <section>\n          <div {...getRootProps()}>\n            <input {...getInputProps()} />\n            <div>Add file<br/>{filename===\"\" ? \"\" : filename}\n          </div>\n          </div>\n        </section>\n      )}\n    </Dropzone>\n  );\n}\n\nCustomDropzone.propTypes = {\n  field: PropTypes.objectOf({\n    name: PropTypes.string,\n  }).isRequired,\n  form: PropTypes.objectOf({\n    touched: PropTypes.instanceOf(Array),\n    errors: PropTypes.instanceOf(Array),\n  }).isRequired,\n};\n\nexport default CustomDropzone;"]},"metadata":{},"sourceType":"module"}