{"ast":null,"code":"import _defineProperty from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/AddEmployeeForms/Feedback.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport { TextField } from 'formik-material-ui';\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { Formik, Field, Form } from 'formik';\nimport { EmployeeContext } from 'views/Employee/AddEmployee';\nimport StepperNavigationButtons from 'views/Employee/StepperNavigationButtons';\nimport { StepContext } from 'views/Employee/AddEmployee';\n\nfunction Feedback(props) {\n  var _useContext = useContext(EmployeeContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      employeeData = _useContext2[0],\n      setEmployeeData = _useContext2[1];\n\n  var _useContext3 = useContext(StepContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      activeStep = _useContext4[0],\n      setActiveStep = _useContext4[1];\n\n  var _useState = useState(new Set()),\n      _useState2 = _slicedToArray(_useState, 2),\n      skipped = _useState2[0],\n      setSkipped = _useState2[1];\n\n  return React.createElement(Formik, {\n    initialValues: employeeData // validationSchema={ValidationSchema}\n    ,\n    onSubmit: function onSubmit(values) {\n      //handleNext()\n      var newSkipped = skipped;\n\n      var isStepSkipped = function isStepSkipped(step) {\n        return skipped.has(step);\n      };\n\n      if (isStepSkipped(activeStep)) {\n        newSkipped = new Set(newSkipped.values());\n        newSkipped[\"delete\"](activeStep);\n      }\n\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n      setSkipped(newSkipped);\n      setEmployeeData(_objectSpread({}, employeeData, {\n        feedback: values.feedback\n      }));\n    },\n    render: function render(_ref) {\n      var errors = _ref.errors,\n          values = _ref.values,\n          touched = _ref.touched,\n          handleChange = _ref.handleChange,\n          handleSubmit = _ref.handleSubmit;\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(GridContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Feedback\",\n        id: \"feedback\",\n        name: \"feedback\",\n        value: values.feedback,\n        component: TextField,\n        onChange: handleChange,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(StepperNavigationButtons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }))));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  });\n}\n\nexport default Feedback;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/AddEmployeeForms/Feedback.js"],"names":["React","useState","useContext","TextField","GridItem","GridContainer","Formik","Field","Form","EmployeeContext","StepperNavigationButtons","StepContext","Feedback","props","employeeData","setEmployeeData","activeStep","setActiveStep","Set","skipped","setSkipped","values","newSkipped","isStepSkipped","step","has","prevActiveStep","feedback","errors","touched","handleChange","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { TextField } from 'formik-material-ui'; \nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { Formik, Field, Form } from 'formik'\nimport { EmployeeContext } from 'views/Employee/AddEmployee'\nimport StepperNavigationButtons from 'views/Employee/StepperNavigationButtons';\nimport { StepContext } from 'views/Employee/AddEmployee'\n\nfunction Feedback(props) {\n\n  const [employeeData, setEmployeeData] = useContext(EmployeeContext)\n  const [activeStep, setActiveStep] = useContext(StepContext);\n  const [skipped, setSkipped] = useState(new Set());\n\n  return (\n      <Formik\n        initialValues={employeeData}\n        // validationSchema={ValidationSchema}\n        onSubmit={values => {\n          //handleNext()\n          let newSkipped = skipped;\n          const isStepSkipped = step => {\n            return skipped.has(step);\n          };\n          if (isStepSkipped(activeStep)) {\n            newSkipped = new Set(newSkipped.values());\n            newSkipped.delete(activeStep);\n          }\n          setActiveStep(prevActiveStep => prevActiveStep + 1);\n          setSkipped(newSkipped);\n          setEmployeeData({\n            ...employeeData,\n            feedback: values.feedback,\n          })\n        }}\n        render={({ errors, values, touched, handleChange, handleSubmit }) => (\n          <Form>\n            <GridContainer>\n\n              <GridItem xs={12} sm={12} md={12}>\n                <Field\n                  label=\"Feedback\"\n                  id=\"feedback\"\n                  name=\"feedback\"\n                  value={values.feedback}\n                  component={TextField}\n                  onChange={handleChange}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={12}>\n                <StepperNavigationButtons />\n              </GridItem>\n\n            </GridContainer>\n          </Form>\n        )}\n      >\n      </Formik>\n  );\n}\n\nexport default Feedback;"]},"metadata":{},"sourceType":"module"}