{"ast":null,"code":"import _defineProperty from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/AddEmployeeForms/IdProof.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { Formik, Form, Field } from 'formik';\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone'; // import { IdProofContext } from 'views/Employee/Add';\n\nimport Chip from '@material-ui/core/Chip';\nvar useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n});\n\nfunction IdProof(props) {\n  var classes = useStyles();\n\n  var _useContext = useContext(EmployeeContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      employeeData = _useContext2[0],\n      setEmployeeData = _useContext2[1];\n\n  var _useContext3 = useContext(StepContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      activeStep = _useContext4[0],\n      setActiveStep = _useContext4[1];\n\n  var _useState = useState(new Set()),\n      _useState2 = _slicedToArray(_useState, 2),\n      skipped = _useState2[0],\n      setSkipped = _useState2[1];\n\n  var _useContext5 = useContext(TitleContext),\n      _useContext6 = _slicedToArray(_useContext5, 2),\n      title = _useContext6[0],\n      setTitle = _useContext6[1];\n\n  var fileList = []; // const [idProof,setIdProof]=useContext(IdProofContext)\n\n  setTitle('ID Proof');\n  return React.createElement(Formik, {\n    initialValues: employeeData // validationSchema={ValidationSchema}\n    ,\n    onSubmit: function onSubmit(values) {\n      //handleNext()\n      var newSkipped = skipped;\n\n      var isStepSkipped = function isStepSkipped(step) {\n        return skipped.has(step);\n      };\n\n      if (isStepSkipped(activeStep)) {\n        newSkipped = new Set(newSkipped.values());\n        newSkipped[\"delete\"](activeStep);\n      }\n\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n      setSkipped(newSkipped);\n      setEmployeeData(_objectSpread({}, employeeData, {\n        idProof: values.idProof\n      }));\n    },\n    render: function render() {\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(GridContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(FormLabel, {\n        component: \"legend\",\n        style: {\n          textAlign: 'left'\n        },\n        className: classes.field,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Upload ID Proof\"), React.createElement(CustomDropzone, {\n        list: values.idProof,\n        callBack: function callBack(files) {\n          var exist = 0;\n          files.map(function (file) {\n            fileList.map(function (existingFile) {\n              if (existingFile.name === file.name && existingFile.size === file.size) {\n                exist = 1;\n                alert(\"File has already selected\");\n              }\n            });\n\n            if (exist === 0) {\n              fileList.push(file);\n            } else {\n              exist = 0;\n            }\n          });\n          setFieldValue('idProof', fileList);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(StepperNavigationButtons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }))));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n}\n\nexport default IdProof;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/AddEmployeeForms/IdProof.js"],"names":["React","useState","useContext","FormLabel","GridItem","GridContainer","Formik","Form","Field","StepperNavigationButtons","StepContext","EmployeeContext","TitleContext","makeStyles","CustomDropzone","Chip","useStyles","field","marginTop","IdProof","props","classes","employeeData","setEmployeeData","activeStep","setActiveStep","Set","skipped","setSkipped","title","setTitle","fileList","values","newSkipped","isStepSkipped","step","has","prevActiveStep","idProof","textAlign","files","exist","map","file","existingFile","name","size","alert","push","setFieldValue"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { Formik, Form, Field } from 'formik'\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone'\n// import { IdProofContext } from 'views/Employee/Add';\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n})\nfunction IdProof(props) {\n\n  const classes = useStyles()\n  const [employeeData, setEmployeeData] = useContext(EmployeeContext)\n  const [activeStep, setActiveStep] = useContext(StepContext);\n  const [skipped, setSkipped] = useState(new Set());\n  const [title, setTitle] = useContext(TitleContext);\n  const fileList=[]\n  // const [idProof,setIdProof]=useContext(IdProofContext)\n  setTitle('ID Proof')\n\n  return (\n    <Formik\n      initialValues={employeeData}\n      // validationSchema={ValidationSchema}\n      onSubmit={values => {\n        //handleNext()\n        let newSkipped = skipped;\n        const isStepSkipped = step => {\n          return skipped.has(step);\n        };\n        if (isStepSkipped(activeStep)) {\n          newSkipped = new Set(newSkipped.values());\n          newSkipped.delete(activeStep);\n        }\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        setSkipped(newSkipped);\n        setEmployeeData({\n          ...employeeData,\n          idProof: values.idProof,\n        })\n      }}\n      render={() => (\n        <Form>\n          <GridContainer>\n            <GridItem xs={12} sm={12} md={12}>\n              <FormLabel component=\"legend\" style={{ textAlign: 'left' }} className={classes.field}>Upload ID Proof</FormLabel>\n              <CustomDropzone list={values.idProof} callBack={files=>{\n                  var exist=0\n                  files.map(file=>{\n                    fileList.map(existingFile=>{\n                      if(existingFile.name===file.name && existingFile.size===file.size){\n                        exist=1\n                        alert(\"File has already selected\")\n                      }\n                    })\n                    if(exist===0){\n                    fileList.push(file)\n                    }\n                    else{\n                    exist=0;\n                    }\n                  })\n                  setFieldValue('idProof',fileList)\n                }} />\n              {/* <Field\n                // label=\"Image\"\n                id=\"idProof\"\n                name=\"idProof\"\n                component={CustomDropzone}\n                fullWidth\n              /> */}\n            {/* {idProof?idProof.map(a=>{\n                return(<div>\n               <Chip label={a.name} color=\"primary\" /><br/><br/></div>\n              //  onDelete={handleDelete}\n                )})\n              :\"\"} */}\n            </GridItem>\n            <GridItem xs={12} sm={12} md={12}>\n              <StepperNavigationButtons />\n            </GridItem>\n          </GridContainer>\n        </Form>\n      )}\n    >\n    </Formik>\n  );\n}\n\nexport default IdProof;"]},"metadata":{},"sourceType":"module"}