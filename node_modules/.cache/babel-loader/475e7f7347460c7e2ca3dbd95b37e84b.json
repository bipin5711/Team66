{"ast":null,"code":"import _toConsumableArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/AddEmployeeForms/EmergencyContact.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport { TextField } from 'formik-material-ui';\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { Formik, Field, Form, yupToFormErrors, FieldArray } from 'formik';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add';\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport * as Yup from 'yup';\nimport { makeStyles } from \"@material-ui/core/styles\";\nvar useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n});\nvar validationSchema = Yup.object().shape({\n  emergencyContacts: Yup.array().of(Yup.object().shape({\n    name1: Yup.string().min(2, 'too Short!').required('Required'),\n    mobile1: Yup.number().typeError('Mobile must be number').required('Required!'),\n    relationship1: Yup.string().required('Required') // mobile2: Yup.number().typeError('Mobile must be number')\n\n  }))\n});\n\nfunction EmergencyContact(props) {\n  var classes = useStyles();\n\n  var _useContext = useContext(EmployeeContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      employeeData = _useContext2[0],\n      setEmployeeData = _useContext2[1];\n\n  var _useContext3 = useContext(StepContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      activeStep = _useContext4[0],\n      setActiveStep = _useContext4[1];\n\n  var _useState = useState(new Set()),\n      _useState2 = _slicedToArray(_useState, 2),\n      skipped = _useState2[0],\n      setSkipped = _useState2[1];\n\n  var _useContext5 = useContext(TitleContext),\n      _useContext6 = _slicedToArray(_useContext5, 2),\n      title = _useContext6[0],\n      setTitle = _useContext6[1];\n\n  setTitle('Emergency Contact');\n  return React.createElement(Formik, {\n    initialValues: employeeData // validationSchema={validationSchema}\n    ,\n    onSubmit: function onSubmit(values) {\n      //handleNext()\n      var newSkipped = skipped;\n\n      var isStepSkipped = function isStepSkipped(step) {\n        return skipped.has(step);\n      };\n\n      if (isStepSkipped(activeStep)) {\n        newSkipped = new Set(newSkipped.values());\n        newSkipped[\"delete\"](activeStep);\n      }\n\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n      setSkipped(newSkipped);\n      setEmployeeData(_objectSpread({}, employeeData, {\n        emergencyContacts: _toConsumableArray(values.emergencyContacts)\n      }));\n      console.log(\"1\", values.emergencyContacts); // console.log(\"1\",values.emergencyContacts.mobile)\n      // console.log(\"1\",values.emergencyContacts.relationship)\n    },\n    render: function render(values, setFieldValue) {\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(GridContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(FieldArray, {\n        name: \"emergencyContacts\",\n        render: function render(arrayHelpers) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, employeeData.emergencyContacts.map(function (friend, index) {\n            return React.createElement(\"div\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85\n              },\n              __self: this\n            }, React.createElement(GridItem, {\n              xs: 12,\n              sm: 12,\n              md: 5,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 86\n              },\n              __self: this\n            }, React.createElement(Field, {\n              name: \"emergencyContacts[\".concat(index, \"].name\"),\n              className: classes.field,\n              label: \"Name\",\n              component: TextField,\n              fullWidth: true,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87\n              },\n              __self: this\n            })), React.createElement(GridItem, {\n              xs: 12,\n              sm: 12,\n              md: 4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 95\n              },\n              __self: this\n            }, React.createElement(Field, {\n              name: \"emergencyContacts[\".concat(index, \"].mobile\"),\n              label: \"Mobile\",\n              className: classes.field,\n              component: TextField,\n              fullWidth: true,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 96\n              },\n              __self: this\n            })), React.createElement(GridItem, {\n              xs: 12,\n              sm: 12,\n              md: 3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }, React.createElement(Field, {\n              name: \"emergencyContacts[\".concat(index, \"].relationship\"),\n              label: \"Relationship\",\n              className: classes.field,\n              component: TextField,\n              fullWidth: true,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105\n              },\n              __self: this\n            })));\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(StepperNavigationButtons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }))));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  });\n}\n\nexport default EmergencyContact;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/AddEmployeeForms/EmergencyContact.js"],"names":["React","useState","useContext","TextField","GridItem","GridContainer","Formik","Field","Form","yupToFormErrors","FieldArray","StepContext","EmployeeContext","TitleContext","StepperNavigationButtons","Yup","makeStyles","useStyles","field","marginTop","validationSchema","object","shape","emergencyContacts","array","of","name1","string","min","required","mobile1","number","typeError","relationship1","EmergencyContact","props","classes","employeeData","setEmployeeData","activeStep","setActiveStep","Set","skipped","setSkipped","title","setTitle","values","newSkipped","isStepSkipped","step","has","prevActiveStep","console","log","setFieldValue","arrayHelpers","map","friend","index"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,eAA9B,EAA+CC,UAA/C,QAAiE,QAAjE;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,YAAvC,QAA2D,oBAA3D;AACA,OAAOC,wBAAP,MAAqC,6CAArC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,IAAMC,SAAS,GAAGD,UAAU,CAAC;AAC3BE,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE;AADN;AADoB,CAAD,CAA5B;AAMA,IAAMC,gBAAgB,GAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,EAAAA,iBAAiB,EAACR,GAAG,CAACS,KAAJ,GAAYC,EAAZ,CAAgBV,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAChC;AACEI,IAAAA,KAAK,EAAEX,GAAG,CAACY,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,QAAlC,CAA2C,UAA3C,CADT;AAEEC,IAAAA,OAAO,EAAEf,GAAG,CAACgB,MAAJ,GAAaC,SAAb,CAAuB,uBAAvB,EAAgDH,QAAhD,CAAyD,WAAzD,CAFX;AAGEI,IAAAA,aAAa,EAAElB,GAAG,CAACY,MAAJ,GAAaE,QAAb,CAAsB,UAAtB,CAHjB,CAIE;;AAJF,GADgC,CAAhB;AADwB,CAAnB,CAAzB;;AAUA,SAASK,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,MAAMC,OAAO,GAAGnB,SAAS,EAAzB;;AAD+B,oBAESf,UAAU,CAACU,eAAD,CAFnB;AAAA;AAAA,MAExByB,YAFwB;AAAA,MAEVC,eAFU;;AAAA,qBAGKpC,UAAU,CAACS,WAAD,CAHf;AAAA;AAAA,MAGxB4B,UAHwB;AAAA,MAGZC,aAHY;;AAAA,kBAIDvC,QAAQ,CAAC,IAAIwC,GAAJ,EAAD,CAJP;AAAA;AAAA,MAIxBC,OAJwB;AAAA,MAIfC,UAJe;;AAAA,qBAKLzC,UAAU,CAACW,YAAD,CALL;AAAA;AAAA,MAKxB+B,KALwB;AAAA,MAKjBC,QALiB;;AAM/BA,EAAAA,QAAQ,CAAC,mBAAD,CAAR;AAEA,SAEE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAER,YADjB,CAEE;AAFF;AAGE,IAAA,QAAQ,EAAE,kBAAAS,MAAM,EAAI;AAClB;AACA,UAAIC,UAAU,GAAGL,OAAjB;;AACA,UAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAC5B,eAAOP,OAAO,CAACQ,GAAR,CAAYD,IAAZ,CAAP;AACD,OAFD;;AAGA,UAAID,aAAa,CAACT,UAAD,CAAjB,EAA+B;AAC7BQ,QAAAA,UAAU,GAAG,IAAIN,GAAJ,CAAQM,UAAU,CAACD,MAAX,EAAR,CAAb;AACAC,QAAAA,UAAU,UAAV,CAAkBR,UAAlB;AACD;;AACDC,MAAAA,aAAa,CAAC,UAAAW,cAAc;AAAA,eAAIA,cAAc,GAAG,CAArB;AAAA,OAAf,CAAb;AACAR,MAAAA,UAAU,CAACI,UAAD,CAAV;AACAT,MAAAA,eAAe,mBACVD,YADU;AAEbd,QAAAA,iBAAiB,qBACZuB,MAAM,CAACvB,iBADK;AAFJ,SAAf;AAmBA6B,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBP,MAAM,CAACvB,iBAAvB,EA/BkB,CAiChB;AAEA;AACH,KAvCH;AAwCE,IAAA,MAAM,EAAE,gBAACuB,MAAD,EAAQQ,aAAR;AAAA,aACN,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,UAAD;AACE,QAAA,IAAI,EAAC,mBADP;AAEE,QAAA,MAAM,EAAE,gBAAAC,YAAY;AAAA,iBAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGlB,YAAY,CAACd,iBAAb,CAA+BiC,GAA/B,CAAmC,UAACC,MAAD,EAASC,KAAT;AAAA,mBAClC;AAAK,cAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,oBAAC,QAAD;AAAU,cAAA,EAAE,EAAE,EAAd;AAAkB,cAAA,EAAE,EAAE,EAAtB;AAA0B,cAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA,oBAAC,KAAD;AACA,cAAA,IAAI,8BAAuBA,KAAvB,WADJ;AAEA,cAAA,SAAS,EAAEtB,OAAO,CAAClB,KAFnB;AAGA,cAAA,KAAK,EAAC,MAHN;AAIA,cAAA,SAAS,EAAEf,SAJX;AAKA,cAAA,SAAS,MALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,CADF,EAUE,oBAAC,QAAD;AAAU,cAAA,EAAE,EAAE,EAAd;AAAkB,cAAA,EAAE,EAAE,EAAtB;AAA0B,cAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA,oBAAC,KAAD;AACA,cAAA,IAAI,8BAAuBuD,KAAvB,aADJ;AAEA,cAAA,KAAK,EAAC,QAFN;AAGA,cAAA,SAAS,EAAEtB,OAAO,CAAClB,KAHnB;AAIA,cAAA,SAAS,EAAEf,SAJX;AAKA,cAAA,SAAS,MALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,CAVF,EAmBE,oBAAC,QAAD;AAAU,cAAA,EAAE,EAAE,EAAd;AAAkB,cAAA,EAAE,EAAE,EAAtB;AAA0B,cAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA,oBAAC,KAAD;AACA,cAAA,IAAI,8BAAuBuD,KAAvB,mBADJ;AAEA,cAAA,KAAK,EAAC,cAFN;AAGA,cAAA,SAAS,EAAEtB,OAAO,CAAClB,KAHnB;AAIA,cAAA,SAAS,EAAEf,SAJX;AAKA,cAAA,SAAS,MALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,CAnBF,CADkC;AAAA,WAAnC,CADH,CADkB;AAAA,SAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAyGE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,EAAd;AAAkB,QAAA,EAAE,EAAE,EAAtB;AAA0B,QAAA,EAAE,EAAE,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAzGF,CADF,CADM;AAAA,KAxCV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF;AA+JD;;AAED,eAAe+B,gBAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { TextField } from 'formik-material-ui';\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport { Formik, Field, Form, yupToFormErrors, FieldArray } from 'formik'\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add'\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport * as Yup from 'yup'\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n})\n\nconst validationSchema = Yup.object().shape({\n  emergencyContacts:Yup.array().of( Yup.object().shape(\n    {\n      name1: Yup.string().min(2, 'too Short!').required('Required'),\n      mobile1: Yup.number().typeError('Mobile must be number').required('Required!'),\n      relationship1: Yup.string().required('Required')\n      // mobile2: Yup.number().typeError('Mobile must be number')\n    }))})\n\n\nfunction EmergencyContact(props) {\n  const classes = useStyles()\n  const [employeeData, setEmployeeData] = useContext(EmployeeContext)\n  const [activeStep, setActiveStep] = useContext(StepContext);\n  const [skipped, setSkipped] = useState(new Set());\n  const [title, setTitle] = useContext(TitleContext);\n  setTitle('Emergency Contact')\n\n  return (\n\n    <Formik\n      initialValues={employeeData}\n      // validationSchema={validationSchema}\n      onSubmit={values => {\n        //handleNext()\n        let newSkipped = skipped;\n        const isStepSkipped = step => {\n          return skipped.has(step);\n        };\n        if (isStepSkipped(activeStep)) {\n          newSkipped = new Set(newSkipped.values());\n          newSkipped.delete(activeStep);\n        }\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        setSkipped(newSkipped);\n        setEmployeeData({\n          ...employeeData,\n          emergencyContacts:[\n            ...values.emergencyContacts\n            // {\n            // id:0,\n            // name: values.emergencyContacts[0].name,\n            // mobile: values.emergencyContacts[0].mobile,\n            // relationship: values.emergencyContacts[0].relationship\n           \n            // },\n            // {id:2,\n            //   name: values.emergencyContacts[1].name,\n            //   mobile: values.emergencyContacts[1].mobile,\n            //   relationship: values.emergencyContacts[1].relationship,\n             \n            //   }\n            ]\n        })\n        console.log(\"1\",values.emergencyContacts)\n\n          // console.log(\"1\",values.emergencyContacts.mobile)\n\n          // console.log(\"1\",values.emergencyContacts.relationship)\n      }}\n      render={(values,setFieldValue) => (\n        <Form>\n          <GridContainer>\n          <FieldArray\n            name=\"emergencyContacts\"\n            render={arrayHelpers => (\n              <div>\n                {employeeData.emergencyContacts.map((friend, index) => (\n                  <div key={index}>\n                    <GridItem xs={12} sm={12} md={5}>\n                    <Field \n                    name={`emergencyContacts[${index}].name`}  \n                    className={classes.field}\n                    label=\"Name\"\n                    component={TextField}\n                    fullWidth\n                    />\n                    </GridItem>\n                    <GridItem xs={12} sm={12} md={4}>\n                    <Field \n                    name={`emergencyContacts[${index}].mobile`}\n                    label=\"Mobile\"\n                    className={classes.field}\n                    component={TextField}\n                    fullWidth \n                    />\n                    </GridItem>\n                    <GridItem xs={12} sm={12} md={3}>\n                    <Field \n                    name={`emergencyContacts[${index}].relationship`}\n                    label=\"Relationship\"\n                    className={classes.field}\n                    component={TextField}\n                    fullWidth />\n                    </GridItem>\n                  </div>\n                ))}\n                \n              </div>\n            )}\n          />\n           {/* <GridItem xs={12} sm={12} md={5}>\n               <Field\n                label=\"Name1\"\n                id=\"emergencyContacts.name\"\n                name=\"emergencyContacts.name\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={4}>\n              <Field\n                label=\"Mobile\"\n                id=\"emergencyContacts.mobile\"\n                name=\"emergencyContacts.mobile\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={3}>\n              <Field\n                label=\"Relationship\"\n                id=\"emergencyContacts.relationship\"\n                name=\"emergencyContacts.relationship\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={5}>\n              <Field\n                label=\"Name 2\"\n                id=\"emergencyContacts.name2\"\n                name=\"emergencyContacts.name2\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={4}>\n              <Field\n                label=\"Mobile\"\n                id=\"emergencyContacts.mobile2\"\n                name=\"emergencyContacts.mobile2\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={3}>\n              <Field\n                label=\"Relationship\"\n                id=\"emergencyContacts.relationship2\"\n                className={classes.field}\n                name=\"emergencyContacts.relationship2\"\n                component={TextField}\n                fullWidth\n              />\n            </GridItem> */}\n\n            <GridItem xs={12} sm={12} md={12}>\n              <StepperNavigationButtons />\n            </GridItem>\n\n          </GridContainer>\n        </Form>\n      )}\n    >\n    </Formik>\n  );\n}\n\nexport default EmergencyContact;"]},"metadata":{},"sourceType":"module"}