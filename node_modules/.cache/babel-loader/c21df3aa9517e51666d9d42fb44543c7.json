{"ast":null,"code":"import _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/AddEmployeeForms/PermanentAddress.js\";\nimport React, { useState, useContext } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport { TextField } from 'formik-material-ui';\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone';\nimport api from '../../lib/axios';\nvar useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n});\nvar validationSchema = Yup.object().shape({\n  permanentStreet1: Yup.string().required('Required'),\n  permanentCity: Yup.string().required('Required') //  addressProof: Yup.file().required('Required')\n\n});\n\nfunction PermanentAddress(props) {\n  var classes = useStyles();\n\n  var _useContext = useContext(EmployeeContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      employeeData = _useContext2[0],\n      setEmployeeData = _useContext2[1];\n\n  var _useContext3 = useContext(StepContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      activeStep = _useContext4[0],\n      setActiveStep = _useContext4[1];\n\n  var _useState = useState(new Set()),\n      _useState2 = _slicedToArray(_useState, 2),\n      skipped = _useState2[0],\n      setSkipped = _useState2[1];\n\n  var _useContext5 = useContext(TitleContext),\n      _useContext6 = _slicedToArray(_useContext5, 2),\n      title = _useContext6[0],\n      setTitle = _useContext6[1];\n\n  var fileList = [];\n  setTitle('Permanent Address');\n  return React.createElement(Formik, {\n    initialValues: employeeData,\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      //handleNext()\n      var newSkipped = skipped;\n\n      var isStepSkipped = function isStepSkipped(step) {\n        return skipped.has(step);\n      };\n\n      if (isStepSkipped(activeStep)) {\n        newSkipped = new Set(newSkipped.values());\n        newSkipped[\"delete\"](activeStep);\n      }\n\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n      setSkipped(newSkipped); // setEmployeeData({\n      //   ...employeeData,\n      //   permanentStreet1: values.permanentStreet1,\n      //   permanentStreet2: values.permanentStreet2,\n      //   permanentCity: values.permanentCity,\n      //   permanentState: values.permanentState,\n      //   permanentCountry: values.permanentCountry,\n      //   permanentAddressProof: values.permanentAddressProof\n      // })\n\n      api.post('employees/file', {\n        file: fileList,\n        type: 'permanent Address Proof'\n      }).then(function (res) {\n        console.log(\"c\", res);\n      })[\"catch\"](function (err) {\n        console.log(\"err\", err);\n      });\n    },\n    render: function render(_ref) {\n      var values = _ref.values,\n          setFieldValue = _ref.setFieldValue;\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(GridContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Street 1\",\n        id: \"permanentStreet1\",\n        name: \"permanentStreet1\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Street 2\",\n        id: \"permanentStreet2\",\n        name: \"permanentStreet2\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"City\",\n        id: \"permanentCity\",\n        name: \"permanentCity\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"State\",\n        id: \"permanentState\",\n        name: \"permanentState\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Country\",\n        id: \"permanentCountry\",\n        name: \"permanentCountry\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(FormLabel, {\n        component: \"legend\",\n        style: {\n          textAlign: 'left'\n        },\n        className: classes.field,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Permanent Address Proof\"), React.createElement(CustomDropzone, {\n        list: fileList,\n        callBack: function callBack(files) {\n          var exist = 0;\n          files.map(function (file) {\n            fileList.map(function (existingFile) {\n              if (existingFile.name === file.name && existingFile.size === file.size) {\n                exist = 1; // alert(\"File has already selected\")\n              }\n            });\n\n            if (exist === 0) {\n              fileList.push(file);\n            } else {\n              exist = 0;\n            }\n          }); // setFieldValue('permanentAddressProof', fileList)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(StepperNavigationButtons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }))));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n}\n\nexport default PermanentAddress;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/AddEmployeeForms/PermanentAddress.js"],"names":["React","useState","useContext","FormLabel","TextField","GridItem","GridContainer","StepperNavigationButtons","StepContext","EmployeeContext","TitleContext","Yup","Formik","Form","Field","makeStyles","CustomDropzone","api","useStyles","field","marginTop","validationSchema","object","shape","permanentStreet1","string","required","permanentCity","PermanentAddress","props","classes","employeeData","setEmployeeData","activeStep","setActiveStep","Set","skipped","setSkipped","title","setTitle","fileList","values","newSkipped","isStepSkipped","step","has","prevActiveStep","post","file","type","then","res","console","log","err","setFieldValue","textAlign","files","exist","map","existingFile","name","size","push"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport { TextField } from 'formik-material-ui';\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add'\nimport * as Yup from 'yup'\nimport { Formik, Form, Field } from 'formik'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone'\nimport api from '../../lib/axios';\nconst useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n})\n\nconst validationSchema = Yup.object().shape({\n  permanentStreet1: Yup.string()\n    .required('Required'),\n  permanentCity: Yup.string()\n    .required('Required'),\n  //  addressProof: Yup.file().required('Required')\n\n});\nfunction PermanentAddress(props) {\n  const classes = useStyles()\n  const [employeeData, setEmployeeData] = useContext(EmployeeContext)\n  const [activeStep, setActiveStep] = useContext(StepContext);\n  const [skipped, setSkipped] = useState(new Set());\n  const [title, setTitle] = useContext(TitleContext);\n  const fileList = []\n  setTitle('Permanent Address')\n\n  return (\n\n    <Formik\n      initialValues={employeeData}\n      validationSchema={validationSchema}\n      onSubmit={values => {\n        //handleNext()\n        let newSkipped = skipped;\n        const isStepSkipped = step => {\n          return skipped.has(step);\n        };\n        if (isStepSkipped(activeStep)) {\n          newSkipped = new Set(newSkipped.values());\n          newSkipped.delete(activeStep);\n        }\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        setSkipped(newSkipped);\n        // setEmployeeData({\n        //   ...employeeData,\n        //   permanentStreet1: values.permanentStreet1,\n        //   permanentStreet2: values.permanentStreet2,\n        //   permanentCity: values.permanentCity,\n        //   permanentState: values.permanentState,\n        //   permanentCountry: values.permanentCountry,\n        //   permanentAddressProof: values.permanentAddressProof\n        // })\n        api.post('employees/file',{file:fileList,type:'permanent Address Proof'}).then(res=>{\n          \n          console.log(\"c\",res)\n      }).catch(err=>{console.log(\"err\",err)})\n      }}\n      render={({ values, setFieldValue }) => {\n        return (\n          <Form>\n            <GridContainer>\n\n              <GridItem xs={12} sm={12} md={6}>\n                <Field\n                  label=\"Street 1\"\n                  id=\"permanentStreet1\"\n                  name=\"permanentStreet1\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={6}>\n                <Field\n                  label=\"Street 2\"\n                  id=\"permanentStreet2\"\n                  name=\"permanentStreet2\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={4}>\n                <Field\n                  label=\"City\"\n                  id=\"permanentCity\"\n                  name=\"permanentCity\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={4}>\n                <Field\n                  label=\"State\"\n                  id=\"permanentState\"\n                  name=\"permanentState\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={4}>\n                <Field\n                  label=\"Country\"\n                  id=\"permanentCountry\"\n                  name=\"permanentCountry\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n              <GridItem xs={12} sm={12} md={12}>\n                <FormLabel component=\"legend\" style={{ textAlign: 'left' }}\n                  className={classes.field}>Permanent Address Proof</FormLabel>\n                <CustomDropzone list={fileList} callBack={files => {\n                  var exist = 0\n                  files.map(file => {\n                    fileList.map(existingFile => {\n                      if (existingFile.name === file.name && existingFile.size === file.size) {\n                        exist = 1\n                        // alert(\"File has already selected\")\n                      }\n                    })\n                    if (exist === 0) {\n                      fileList.push(file)\n                    }\n                    else {\n                      exist = 0;\n                    }\n                  })\n                  // setFieldValue('permanentAddressProof', fileList)\n                }} />\n              </GridItem>\n              <GridItem xs={12} sm={12} md={12}>\n                <StepperNavigationButtons />\n              </GridItem>\n            </GridContainer>\n          </Form>\n        )\n      }}\n    >\n    </Formik>\n  );\n}\n\nexport default PermanentAddress;"]},"metadata":{},"sourceType":"module"}