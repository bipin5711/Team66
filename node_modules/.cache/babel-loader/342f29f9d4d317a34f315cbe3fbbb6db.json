{"ast":null,"code":"import _objectWithoutProperties from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/Dropzone/Dropzone.js\";\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport { EmployeeContext } from 'views/Employee/Add';\n\nfunction CustomDropzone(props) {\n  var _useContext = useContext(EmployeeContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      employeeData = _useContext2[0],\n      setEmployeeData = _useContext2[1];\n\n  var field = props.field,\n      form = props.form,\n      rest = _objectWithoutProperties(props, [\"field\", \"form\"]);\n\n  var error = form.touched[field.name] && form.errors[field.name];\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      filename = _useState2[0],\n      setFilename = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      file = _useState4[0],\n      setFile = _useState4[1]; // function handleOnDrop(files, rejectedFiles) {\n  //   const curfile = files[0]\n  //   setFilename(files[0].name)\n  //   const reader = new FileReader()\n  //   reader.addEventListener(\"load\", () => {\n  //     setFile(reader.result)\n  //     form.setFieldValue(field.name, reader.result)\n  //     setFieldValue(field.name, values.files.concat(acceptedFiles));\n  //   }, false)\n  //   reader.readAsDataURL(curfile)\n  // }\n\n\n  function handleOnDrop(acceptedFiles) {\n    form.setFieldValue(field.name, form.values.files.concat(acceptedFiles));\n  }\n\n  return React.createElement(Dropzone, {\n    onDrop: handleOnDrop // onChange={(e) => form.setFieldValue(field.name, e)}\n    ,\n    multiple: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps;\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, filename === \"\" ? \"Add file\" : employeeData[\"\".concat(field.name)])));\n  });\n}\n\nCustomDropzone.propTypes = {\n  field: PropTypes.objectOf({\n    name: PropTypes.string\n  }).isRequired,\n  form: PropTypes.objectOf({\n    touched: PropTypes.instanceOf(Array),\n    errors: PropTypes.instanceOf(Array)\n  }).isRequired\n};\nexport default CustomDropzone;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/Dropzone/Dropzone.js"],"names":["React","useState","useContext","PropTypes","Dropzone","EmployeeContext","CustomDropzone","props","employeeData","setEmployeeData","field","form","rest","error","touched","name","errors","filename","setFilename","file","setFile","handleOnDrop","acceptedFiles","setFieldValue","values","files","concat","getRootProps","getInputProps","propTypes","objectOf","string","isRequired","instanceOf","Array"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAAUC,eAAV,QAAiC,oBAAjC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,oBAEWL,UAAU,CAACG,eAAD,CAFrB;AAAA;AAAA,MAEtBG,YAFsB;AAAA,MAERC,eAFQ;;AAAA,MAGrBC,KAHqB,GAGIH,KAHJ,CAGrBG,KAHqB;AAAA,MAGdC,IAHc,GAGIJ,KAHJ,CAGdI,IAHc;AAAA,MAGLC,IAHK,4BAGIL,KAHJ;;AAI7B,MAAMM,KAAK,GAAGF,IAAI,CAACG,OAAL,CAAaJ,KAAK,CAACK,IAAnB,KAA4BJ,IAAI,CAACK,MAAL,CAAYN,KAAK,CAACK,IAAlB,CAA1C;;AAJ6B,kBAKGd,QAAQ,CAAC,EAAD,CALX;AAAA;AAAA,MAKtBgB,QALsB;AAAA,MAKZC,WALY;;AAAA,mBAMLjB,QAAQ,CAAC,EAAD,CANH;AAAA;AAAA,MAMtBkB,IANsB;AAAA,MAMhBC,OANgB,kBAO7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASC,YAAT,CAAsBC,aAAtB,EAAqC;AACnCX,IAAAA,IAAI,CAACY,aAAL,CAAmBb,KAAK,CAACK,IAAzB,EAA+BJ,IAAI,CAACa,MAAL,CAAYC,KAAZ,CAAkBC,MAAlB,CAAyBJ,aAAzB,CAA/B;AACH;;AAED,SACE,oBAAC,QAAD;AACE,IAAA,MAAM,EAAED,YADV,CAEE;AAFF;AAGE,IAAA,QAAQ,EAAC,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIG;AAAA,QAAGM,YAAH,QAAGA,YAAH;AAAA,QAAiBC,aAAjB,QAAiBA,aAAjB;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6CAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMX,QAAQ,KAAK,EAAb,GAAkB,UAAlB,GAA+BT,YAAY,WAAIE,KAAK,CAACK,IAAV,EAAjD,CAFF,CADF,CADD;AAAA,GAJH,CADF;AAeD;;AAEDT,cAAc,CAACuB,SAAf,GAA2B;AACzBnB,EAAAA,KAAK,EAAEP,SAAS,CAAC2B,QAAV,CAAmB;AACxBf,IAAAA,IAAI,EAAEZ,SAAS,CAAC4B;AADQ,GAAnB,EAEJC,UAHsB;AAIzBrB,EAAAA,IAAI,EAAER,SAAS,CAAC2B,QAAV,CAAmB;AACvBhB,IAAAA,OAAO,EAAEX,SAAS,CAAC8B,UAAV,CAAqBC,KAArB,CADc;AAEvBlB,IAAAA,MAAM,EAAEb,SAAS,CAAC8B,UAAV,CAAqBC,KAArB;AAFe,GAAnB,EAGHF;AAPsB,CAA3B;AAUA,eAAe1B,cAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport {  EmployeeContext } from 'views/Employee/Add'\n\nfunction CustomDropzone(props) {\n\n  const [employeeData, setEmployeeData] = useContext(EmployeeContext)\n  const { field, form, ...rest } = props;\n  const error = form.touched[field.name] && form.errors[field.name];\n  const [filename, setFilename] = useState('')\n  const [file, setFile] = useState('')\n  // function handleOnDrop(files, rejectedFiles) {\n  //   const curfile = files[0]\n  //   setFilename(files[0].name)\n  //   const reader = new FileReader()\n  //   reader.addEventListener(\"load\", () => {\n  //     setFile(reader.result)\n  //     form.setFieldValue(field.name, reader.result)\n  //     setFieldValue(field.name, values.files.concat(acceptedFiles));\n  //   }, false)\n  //   reader.readAsDataURL(curfile)\n  // }\n    function handleOnDrop(acceptedFiles) {\n      form.setFieldValue(field.name, form.values.files.concat(acceptedFiles));\n  }\n  \n  return (\n    <Dropzone\n      onDrop={handleOnDrop}\n      // onChange={(e) => form.setFieldValue(field.name, e)}\n      multiple=\"true\">\n      {({ getRootProps, getInputProps }) => (\n        <section>\n          <div {...getRootProps()}>\n            <input {...getInputProps()} />\n            <div>{filename === \"\" ? \"Add file\" : employeeData[`${field.name}`]}</div>\n          </div>\n        </section>\n      )}\n    </Dropzone>\n  );\n}\n\nCustomDropzone.propTypes = {\n  field: PropTypes.objectOf({\n    name: PropTypes.string,\n  }).isRequired,\n  form: PropTypes.objectOf({\n    touched: PropTypes.instanceOf(Array),\n    errors: PropTypes.instanceOf(Array),\n  }).isRequired,\n};\n\nexport default CustomDropzone;"]},"metadata":{},"sourceType":"module"}