{"ast":null,"code":"import _toConsumableArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/AddEmployeeForms/CurrentAddress.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone';\nimport api, { toFormData } from '../../lib/axios';\nvar useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n});\nvar validationSchema = Yup.object().shape({\n  currentAddress: Yup.object().shape({\n    street1: Yup.string().required('Required'),\n    city: Yup.string().required('Required')\n  })\n});\n\nfunction CurrentAddress(props) {\n  var classes = useStyles();\n\n  var _useContext = useContext(EmployeeContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      employeeData = _useContext2[0],\n      setEmployeeData = _useContext2[1];\n\n  var _useContext3 = useContext(StepContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      activeStep = _useContext4[0],\n      setActiveStep = _useContext4[1];\n\n  var _useState = useState(new Set()),\n      _useState2 = _slicedToArray(_useState, 2),\n      skipped = _useState2[0],\n      setSkipped = _useState2[1]; // const [file, setFile] = useState()\n\n\n  var _useContext5 = useContext(TitleContext),\n      _useContext6 = _slicedToArray(_useContext5, 2),\n      title = _useContext6[0],\n      setTitle = _useContext6[1];\n\n  var fileList = []; // fileList.push(employeeData.employeeAttachments.filter(a=>\n  //   a.type===\"Current Address Proof\"\n  // ))\n\n  console.log(\"123\", fileList); // employeeData.employeeAttachments.map(a=>({\n  //   a.type===\"Current Address Proof\"?fileList.push(a):''\n  // }))\n  // useEffect(()=>{\n  //   // fileList.push(employeeData.employeeAttachments.filter(a=>\n  //   //     a.type===\"Current Address Proof\"\n  //   //   ))\n  //   employeeData.employeeAttachments.map(a=>\n  //         a.type===\"Current Address Proof\"?fileList.push(a):\"\"\n  //       )\n  //   console.log('shrinath',fileList)\n  // },[])\n\n  console.log(\"form 2\", employeeData);\n  var fileAttachments = [];\n  setTitle('Current Address');\n  console.log(\"raina\", employeeData);\n  return React.createElement(Formik, {\n    initialValues: employeeData // validationSchema={validationSchema}\n    ,\n    onSubmit: function onSubmit(values) {\n      //handleNext()\n      var newSkipped = skipped;\n\n      var isStepSkipped = function isStepSkipped(step) {\n        return skipped.has(step);\n      };\n\n      if (isStepSkipped(activeStep)) {\n        newSkipped = new Set(newSkipped.values());\n        newSkipped[\"delete\"](activeStep);\n      }\n\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n      setSkipped(newSkipped);\n      setEmployeeData(_objectSpread({}, employeeData, {\n        currentAddress: {\n          id: 0,\n          street1: values.currentAddress.street1,\n          street2: values.currentAddress.street2,\n          city: values.currentAddress.city,\n          state: values.currentAddress.state,\n          country: values.currentAddress.country\n        },\n        employeeAttachments: values.employeeAttachments\n      }));\n    },\n    render: function render(_ref) {\n      var values = _ref.values,\n          setFieldValue = _ref.setFieldValue;\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(GridContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Street 1\",\n        id: \"currentAddress.street1\",\n        name: \"currentAddress.street1\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Street 2\",\n        id: \"currentAddress.street2\",\n        name: \"currentAddress.street2\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"City\",\n        id: \"currentAddress.city\",\n        name: \"currentAddress.city\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"State\",\n        id: \"currentAddress.state\",\n        name: \"currentAddress.state\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Country\",\n        id: \"currentAddress.country\",\n        name: \"currentAddress.country\",\n        className: classes.field,\n        component: TextField,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(FormLabel, {\n        component: \"legend\",\n        style: {\n          textAlign: 'left'\n        },\n        className: classes.field,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Current Address Proof\"), React.createElement(CustomDropzone, {\n        list: values.employeeAttachments ? values.employeeAttachments.filter(function (a) {\n          return a.type === \"Current Address Proof\";\n        }) : [] // values.employeeAttachments.filter(a=>a.type===\"Current Address Proof\") \n        // attachments={values.attachments  ? values.attachments : []} \n        ,\n        callBack: function callBack(files) {\n          files.map(function (file) {\n            // console.log(file)\n            var exist = 0;\n            fileList.map(function (existingFile) {\n              if (existingFile.name === file.name && existingFile.size === file.size) {\n                exist = 1; // alert(\"File has already selected\")\n              }\n            });\n\n            if (exist === 1) {\n              exist = 0;\n            } else {\n              console.log(\"dshjghjghj\", file);\n              fileList.push(file);\n              var test = {\n                file: file,\n                type: 'Current Address Proof'\n              };\n              var fileData = toFormData(test);\n              api.post('employees/file', fileData).then(function (res) {\n                setFieldValue('employeeAttachments', [].concat(_toConsumableArray(values.employeeAttachments), [res.data.data]));\n              })[\"catch\"](function (err) {\n                console.log(\"err\", err);\n              });\n            }\n          });\n          console.log(\"filelist1\", values.employeeAttachments); // setFieldValue('employeeAttachments', fileList)\n\n          setFieldValue('employeeAttachments', values.employeeAttachments);\n          console.log(\"filelist2\", values.employeeAttachments); // setFile(fileList)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(StepperNavigationButtons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }))));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  });\n}\n\nexport default CurrentAddress;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/AddEmployeeForms/CurrentAddress.js"],"names":["React","useState","useContext","useEffect","Fragment","FormLabel","GridItem","GridContainer","StepperNavigationButtons","StepContext","EmployeeContext","TitleContext","Yup","Formik","Form","Field","ErrorMessage","TextField","makeStyles","CustomDropzone","api","toFormData","useStyles","field","marginTop","validationSchema","object","shape","currentAddress","street1","string","required","city","CurrentAddress","props","classes","employeeData","setEmployeeData","activeStep","setActiveStep","Set","skipped","setSkipped","title","setTitle","fileList","console","log","fileAttachments","values","newSkipped","isStepSkipped","step","has","prevActiveStep","id","street2","state","country","employeeAttachments","setFieldValue","textAlign","filter","a","type","files","map","file","exist","existingFile","name","size","push","test","fileData","post","then","res","data","err"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add'\nimport * as Yup from 'yup'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport { TextField } from 'formik-material-ui';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone'\nimport api, { toFormData } from '../../lib/axios';\n\nconst useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n})\n\nconst validationSchema = Yup.object().shape({\n  currentAddress: Yup.object().shape(\n    {\n      street1: Yup.string().required('Required'),\n      city: Yup.string().required('Required')\n    }\n  )\n});\n\nfunction CurrentAddress(props) {\n\n  const classes = useStyles()\n  const [employeeData, setEmployeeData] = useContext(EmployeeContext)\n  const [activeStep, setActiveStep] = useContext(StepContext);\n  const [skipped, setSkipped] = useState(new Set());\n  // const [file, setFile] = useState()\n  const [title, setTitle] = useContext(TitleContext);\n  let fileList=[]\n  // fileList.push(employeeData.employeeAttachments.filter(a=>\n  //   a.type===\"Current Address Proof\"\n  // ))\n  console.log(\"123\",fileList)\n  // employeeData.employeeAttachments.map(a=>({\n  //   a.type===\"Current Address Proof\"?fileList.push(a):''\n  // }))\n  // useEffect(()=>{\n  //   // fileList.push(employeeData.employeeAttachments.filter(a=>\n  //   //     a.type===\"Current Address Proof\"\n  //   //   ))\n  //   employeeData.employeeAttachments.map(a=>\n  //         a.type===\"Current Address Proof\"?fileList.push(a):\"\"\n  //       )\n  //   console.log('shrinath',fileList)\n  // },[])\n  console.log(\"form 2\",employeeData)\n  const fileAttachments = []\n  setTitle('Current Address')\n  console.log(\"raina\",employeeData)\n  return (\n    <Formik\n      initialValues={employeeData}\n      // validationSchema={validationSchema}\n      onSubmit={values => {\n        //handleNext()\n        let newSkipped = skipped;\n        const isStepSkipped = step => {\n          return skipped.has(step);\n        };\n        if (isStepSkipped(activeStep)) {\n          newSkipped = new Set(newSkipped.values());\n          newSkipped.delete(activeStep);\n        }\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        setSkipped(newSkipped);\n        setEmployeeData({\n          ...employeeData,\n          currentAddress: {\n            id:0,\n            street1: values.currentAddress.street1,\n            street2: values.currentAddress.street2,\n            city: values.currentAddress.city,\n            state: values.currentAddress.state,\n            country: values.currentAddress.country\n          },\n          employeeAttachments: values.employeeAttachments\n        })\n      }}\n      render={({ values, setFieldValue }) => {\n        return (<Form>\n          <GridContainer>\n\n            <GridItem xs={12} sm={12} md={6}>\n              <Field\n                label=\"Street 1\"\n                id=\"currentAddress.street1\"\n                name=\"currentAddress.street1\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={6}>\n              <Field\n                label=\"Street 2\"\n                id=\"currentAddress.street2\"\n                name=\"currentAddress.street2\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={4}>\n              <Field\n                label=\"City\"\n                id=\"currentAddress.city\"\n                name=\"currentAddress.city\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={4}>\n              <Field\n                label=\"State\"\n                id=\"currentAddress.state\"\n                name=\"currentAddress.state\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={4}>\n              <Field\n                label=\"Country\"\n                id=\"currentAddress.country\"\n                name=\"currentAddress.country\"\n                className={classes.field}\n                component={TextField}\n                fullWidth\n              />\n            </GridItem>\n            <GridItem xs={12} sm={12} md={12}>\n          <FormLabel component=\"legend\" style={{ textAlign: 'left' }} className={classes.field}>Current Address Proof</FormLabel>\n              <CustomDropzone list={values.employeeAttachments ? values.employeeAttachments.filter(a=>a.type===\"Current Address Proof\") : []}\n              // values.employeeAttachments.filter(a=>a.type===\"Current Address Proof\") \n              // attachments={values.attachments  ? values.attachments : []} \n              callBack={(files) => {\n\n                files.map(file => {\n                  // console.log(file)\n                  \n                  var exist = 0\n                 fileList.map(existingFile => {\n                    if (existingFile.name === file.name && existingFile.size === file.size) {\n                      exist = 1;\n                      // alert(\"File has already selected\")\n                    }\n                  })\n                  if (exist === 1) {\n                    exist = 0;\n                  }\n                  else {\n                  console.log(\"dshjghjghj\",file)\n                    fileList.push(file)\n                    let test = {\n                      file,\n                      type: 'Current Address Proof'\n                    }\n                    const fileData = toFormData(test)\n                    api.post('employees/file', fileData).then(res => {\n                      setFieldValue('employeeAttachments',[...values.employeeAttachments,res.data.data])\n                    }).catch(err => { console.log(\"err\", err) })\n                  }\n                })\n                console.log(\"filelist1\", values.employeeAttachments)\n                // setFieldValue('employeeAttachments', fileList)\n                setFieldValue('employeeAttachments',values.employeeAttachments)\n                console.log(\"filelist2\", values.employeeAttachments)\n                  // setFile(fileList)\n              }}\n              />\n            </GridItem>\n\n            <GridItem xs={12} sm={12} md={12}>\n              <StepperNavigationButtons />\n            </GridItem>\n\n          </GridContainer>\n        </Form>)\n      }}\n    >\n    </Formik>\n  );\n}\n\nexport default CurrentAddress;"]},"metadata":{},"sourceType":"module"}