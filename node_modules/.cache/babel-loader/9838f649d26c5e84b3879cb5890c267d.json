{"ast":null,"code":"import _toConsumableArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/bipin/Downloads/team66/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bipin/Downloads/team66/src/components/AddEmployeeForms/CurrentAddress.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone';\nimport api, { toFormData } from '../../lib/axios';\nvar useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n});\nvar validationSchema = Yup.object().shape({\n  currentAddress: Yup.object().shape({\n    street1: Yup.string().required('Required'),\n    city: Yup.string().required('Required')\n  })\n});\n\nfunction CurrentAddress(props) {\n  var classes = useStyles();\n\n  var _useContext = useContext(EmployeeContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      employeeData = _useContext2[0],\n      setEmployeeData = _useContext2[1];\n\n  var _useContext3 = useContext(StepContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      activeStep = _useContext4[0],\n      setActiveStep = _useContext4[1];\n\n  var _useState = useState(new Set()),\n      _useState2 = _slicedToArray(_useState, 2),\n      skipped = _useState2[0],\n      setSkipped = _useState2[1];\n\n  var _useContext5 = useContext(TitleContext),\n      _useContext6 = _slicedToArray(_useContext5, 2),\n      title = _useContext6[0],\n      setTitle = _useContext6[1];\n\n  var fileList = [];\n  setTitle('Current Address');\n  console.log(\"current\", employeeData.employeeAttachments);\n  return React.createElement(Formik, {\n    initialValues: employeeData // validationSchema={validationSchema}\n    ,\n    onSubmit: function onSubmit(values) {\n      //handleNext()\n      var newSkipped = skipped;\n\n      var isStepSkipped = function isStepSkipped(step) {\n        return skipped.has(step);\n      };\n\n      if (isStepSkipped(activeStep)) {\n        newSkipped = new Set(newSkipped.values());\n        newSkipped[\"delete\"](activeStep);\n      }\n\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n      setSkipped(newSkipped);\n      setEmployeeData(_objectSpread({}, employeeData, {\n        currentAddress: {\n          id: 0,\n          street1: values.currentAddress.street1,\n          street2: values.currentAddress.street2,\n          city: values.currentAddress.city,\n          state: values.currentAddress.state,\n          country: values.currentAddress.country\n        },\n        employeeAttachments: // [...values.employeeAttachments]\n        [].concat(_toConsumableArray(employeeData.employeeAttachments), _toConsumableArray(values.employeeAttachments))\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, function (_ref) {\n    var setFieldValue = _ref.setFieldValue,\n        values = _ref.values;\n    // console.log(values)\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(GridContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Street 1\",\n      id: \"currentAddress.street1\",\n      name: \"currentAddress.street1\",\n      className: classes.field,\n      component: TextField,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })), React.createElement(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Street 2\",\n      id: \"currentAddress.street2\",\n      name: \"currentAddress.street2\",\n      className: classes.field,\n      component: TextField,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"City\",\n      id: \"currentAddress.city\",\n      name: \"currentAddress.city\",\n      className: classes.field,\n      component: TextField,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"State\",\n      id: \"currentAddress.state\",\n      name: \"currentAddress.state\",\n      className: classes.field,\n      component: TextField,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Country\",\n      id: \"currentAddress.country\",\n      name: \"currentAddress.country\",\n      className: classes.field,\n      component: TextField,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      component: \"legend\",\n      style: {\n        textAlign: 'left'\n      },\n      className: classes.field,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Current Address Proof\"), React.createElement(CustomDropzone, {\n      list: values.employeeAttachments ? values.employeeAttachments : [] // .filter(a=>a.type===\"Current Address Proof\") \n      ,\n      type: \"Current Address Proof\",\n      callBack: function callBack(files) {\n        files.map(function (file) {\n          var exist = 0;\n          fileList.map(function (existingFile) {\n            if (existingFile.name === file.name && existingFile.size === file.size) {\n              exist = 1;\n            }\n          });\n\n          if (exist === 1) {\n            exist = 0;\n          } else {\n            fileList.push(file);\n            var test = {\n              file: file,\n              type: 'Current Address Proof'\n            };\n            var fileData = toFormData(test);\n            api.post('employees/file', fileData).then(function (res) {\n              console.log(\"values.employeeAttachments\", values.employeeAttachments); // setEmployeeData({...employeeData,employeeAttachments:[...employeeData.employeeAttachments,res.data.data]})\n              // setEmployeeData({...employeeData,\n              //   employeeAttachments:[...employeeData.employeeAttachments,res.data.data]})\n\n              setFieldValue('employeeAttachments', [].concat(_toConsumableArray(values.employeeAttachments.filter(function (a) {\n                return a.type === \"Current Address Proof\";\n              })), [res.data.data]));\n            })[\"catch\"](function (err) {\n              console.log(\"err\", err);\n            });\n          }\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(StepperNavigationButtons, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))));\n  });\n}\n\nexport default CurrentAddress;","map":{"version":3,"sources":["/home/bipin/Downloads/team66/src/components/AddEmployeeForms/CurrentAddress.js"],"names":["React","useState","useContext","useEffect","Fragment","FormLabel","GridItem","GridContainer","StepperNavigationButtons","StepContext","EmployeeContext","TitleContext","Yup","Formik","Form","Field","ErrorMessage","TextField","makeStyles","CustomDropzone","api","toFormData","useStyles","field","marginTop","validationSchema","object","shape","currentAddress","street1","string","required","city","CurrentAddress","props","classes","employeeData","setEmployeeData","activeStep","setActiveStep","Set","skipped","setSkipped","title","setTitle","fileList","console","log","employeeAttachments","values","newSkipped","isStepSkipped","step","has","prevActiveStep","id","street2","state","country","setFieldValue","textAlign","files","map","file","exist","existingFile","name","size","push","test","type","fileData","post","then","res","filter","a","data","err"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from 'react';\nimport { FormLabel } from \"@material-ui/core\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport StepperNavigationButtons from 'components/Stepper/StepperNavigationButtons';\nimport { StepContext, EmployeeContext, TitleContext } from 'views/Employee/Add'\nimport * as Yup from 'yup'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport { TextField } from 'formik-material-ui';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CustomDropzone from 'components/Dropzone/Dropzone'\nimport api, { toFormData } from '../../lib/axios';\n\nconst useStyles = makeStyles({\n  field: {\n    marginTop: \"32px\"\n  }\n})\n\nconst validationSchema = Yup.object().shape({\n  currentAddress: Yup.object().shape(\n    {\n      street1: Yup.string().required('Required'),\n      city: Yup.string().required('Required')\n    }\n  )\n});\n\nfunction CurrentAddress(props) {\n\n  const classes = useStyles()\n  const [employeeData, setEmployeeData] = useContext(EmployeeContext)\n  const [activeStep, setActiveStep] = useContext(StepContext);\n  const [skipped, setSkipped] = useState(new Set());\n  const [title, setTitle] = useContext(TitleContext);\n  let fileList = []\n  setTitle('Current Address')\n  console.log(\"current\", employeeData.employeeAttachments)\n  return (\n    <Formik\n      initialValues={employeeData}\n      // validationSchema={validationSchema}\n      onSubmit={values => {\n        //handleNext()\n        let newSkipped = skipped;\n        const isStepSkipped = step => {\n          return skipped.has(step);\n        };\n        if (isStepSkipped(activeStep)) {\n          newSkipped = new Set(newSkipped.values());\n          newSkipped.delete(activeStep);\n        }\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        setSkipped(newSkipped);\n        setEmployeeData({\n          ...employeeData,\n          currentAddress: {\n            id: 0,\n            street1: values.currentAddress.street1,\n            street2: values.currentAddress.street2,\n            city: values.currentAddress.city,\n            state: values.currentAddress.state,\n            country: values.currentAddress.country\n          },\n          employeeAttachments:\n            // [...values.employeeAttachments]\n          [...employeeData.employeeAttachments,...values.employeeAttachments]\n        })\n      }}\n    >\n      {({ setFieldValue, values }) => {\n        // console.log(values)\n        return (\n          <Form>\n            <GridContainer>\n\n              <GridItem xs={12} sm={12} md={6}>\n                <Field\n                  label=\"Street 1\"\n                  id=\"currentAddress.street1\"\n                  name=\"currentAddress.street1\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={6}>\n                <Field\n                  label=\"Street 2\"\n                  id=\"currentAddress.street2\"\n                  name=\"currentAddress.street2\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={4}>\n                <Field\n                  label=\"City\"\n                  id=\"currentAddress.city\"\n                  name=\"currentAddress.city\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={4}>\n                <Field\n                  label=\"State\"\n                  id=\"currentAddress.state\"\n                  name=\"currentAddress.state\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={4}>\n                <Field\n                  label=\"Country\"\n                  id=\"currentAddress.country\"\n                  name=\"currentAddress.country\"\n                  className={classes.field}\n                  component={TextField}\n                  fullWidth\n                />\n              </GridItem>\n              <GridItem xs={12} sm={12} md={12}>\n                <FormLabel component=\"legend\" style={{ textAlign: 'left' }} className={classes.field}>Current Address Proof</FormLabel>\n                <CustomDropzone list={values.employeeAttachments ? values.employeeAttachments: []}\n                  // .filter(a=>a.type===\"Current Address Proof\") \n                  type=\"Current Address Proof\"\n                  callBack={(files) => {\n                    files.map(file => {\n\n                      var exist = 0\n                      fileList.map(existingFile => {\n                        if (existingFile.name === file.name && existingFile.size === file.size) {\n                          exist = 1;\n                        }\n                      })\n                      if (exist === 1) {\n                        exist = 0;\n                      }\n                      else {\n                        fileList.push(file)\n                        let test = {\n                          file,\n                          type: 'Current Address Proof'\n                        }\n                        const fileData = toFormData(test)\n                        api.post('employees/file', fileData).then(res => {\n                          console.log(\"values.employeeAttachments\", values.employeeAttachments)\n                          // setEmployeeData({...employeeData,employeeAttachments:[...employeeData.employeeAttachments,res.data.data]})\n                          // setEmployeeData({...employeeData,\n                          //   employeeAttachments:[...employeeData.employeeAttachments,res.data.data]})\n                          setFieldValue('employeeAttachments', [...values.employeeAttachments.filter(a=>a.type===\"Current Address Proof\"), res.data.data])\n                        }).catch(err => { console.log(\"err\", err) })\n                        \n                      }\n                    })\n                   \n                  }}\n                />\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={12}>\n                <StepperNavigationButtons />\n              </GridItem>\n\n            </GridContainer>\n          </Form>\n        )\n      }}\n\n    </Formik>\n  );\n}\n\nexport default CurrentAddress;"]},"metadata":{},"sourceType":"module"}